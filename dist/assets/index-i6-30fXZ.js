(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=e(n);fetch(n.href,i)}})();class y{constructor(t={}){this.audioContext=null,this.analyser=null,this.microphone=null,this.stream=null,this.essentia=null,this.isListening=!1,this.animationFrame=null,this.fftSize=t.fftSize||4096,this.sampleRate=44100,this.sensitivity=t.sensitivity||.7,this.cooldownTime=t.cooldownTime||150,this.lastDetectionTime=0,this.onNoteDetectedCallback=null,this.onErrorCallback=null,this.tongueFrequencies={},this.audioBuffer=new Float32Array(this.fftSize),this.bufferIndex=0,this.bufferFilled=!1,this.initializeEssentia()}async initializeEssentia(){return console.log("🎵 Using Web Audio API for pitch detection (EssentiaJS integration in progress)"),this.essentia=null,Promise.resolve()}onNoteDetected(t){this.onNoteDetectedCallback=t}onError(t){this.onErrorCallback=t}updateTongueFrequencies(t){this.tongueFrequencies={...t}}setSensitivity(t){this.sensitivity=Math.max(0,Math.min(1,t))}async startListening(){if(!this.isListening)try{this.stream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!1,noiseSuppression:!1,autoGainControl:!1,sampleRate:this.sampleRate,channelCount:1}}),this.audioContext=new(window.AudioContext||window.webkitAudioContext)({sampleRate:this.sampleRate}),this.microphone=this.audioContext.createMediaStreamSource(this.stream),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=this.fftSize,this.analyser.smoothingTimeConstant=.3,this.analyser.minDecibels=-90,this.analyser.maxDecibels=-10,this.processor=this.audioContext.createScriptProcessor(1024,1,1),this.processor.onaudioprocess=t=>{this.processAudioFrame(t.inputBuffer.getChannelData(0))},this.microphone.connect(this.analyser),this.microphone.connect(this.processor),this.processor.connect(this.audioContext.destination),this.isListening=!0,console.log("Audio listening started")}catch(t){throw console.error("Failed to start audio listening:",t),this.onErrorCallback&&this.onErrorCallback(`Microphone access failed: ${t.message}`),t}}processAudioFrame(t){if(!this.essentia||!this.isListening)return;const e=Math.min(t.length,this.audioBuffer.length-this.bufferIndex);for(let s=0;s<e;s++)this.audioBuffer[this.bufferIndex+s]=t[s];this.bufferIndex+=e,this.bufferIndex>=this.audioBuffer.length&&(this.bufferFilled=!0,this.bufferIndex=0,this.analyzeAudioBuffer())}analyzeAudioBuffer(){if(this.bufferFilled)try{this.essentia?this.analyzeWithEssentia():this.analyzeWithWebAudio()}catch(t){console.warn("Audio analysis error:",t),this.analyzeWithWebAudio()}}analyzeWithEssentia(){try{const t=this.essentia.Windowing(this.audioBuffer,"hann",!0,!0),e=this.essentia.Spectrum(t),n=this.essentia.PitchYin(this.audioBuffer,.1).pitch;n&&n>50&&n<2e3&&this.processPitchDetection(n,e)}catch(t){console.warn("EssentiaJS analysis failed, falling back to basic analysis:",t),this.analyzeWithWebAudio()}}analyzeWithWebAudio(){const t=this.analyser.frequencyBinCount,e=new Uint8Array(t);this.analyser.getByteFrequencyData(e);let s=0,n=0;for(let o=0;o<t;o++)e[o]>n&&(n=e[o],s=o);const i=s*this.audioContext.sampleRate/(this.analyser.fftSize*2);n>50&&i>50&&i<2e3&&this.processPitchDetection(i,{confidence:n/255})}combinePitchEstimates(t,e,s){const n=[];if(t>0&&n.push(t),e>0&&n.push(e),s.frequency.length>0){const o=s.frequency[0];o>50&&o<2e3&&n.push(o)}if(n.length===0)return null;n.sort((o,a)=>o-a);const i=Math.floor(n.length/2);return n.length%2===0?(n[i-1]+n[i])/2:n[i]}processPitchDetection(t,e){const s=Date.now();if(s-this.lastDetectionTime<this.cooldownTime)return;const n=this.findClosestTongue(t,e);n&&n.confidence>=this.sensitivity&&(this.lastDetectionTime=s,this.onNoteDetectedCallback&&this.onNoteDetectedCallback(n))}findClosestTongue(t,e){if(Object.keys(this.tongueFrequencies).length===0)return null;let s=null,n=1/0;for(const[i,o]of Object.entries(this.tongueFrequencies)){const a=parseInt(i),r=Math.abs(t-o),c=r/o;let l=.06;o>800&&(l=.08),o>1200&&(l=.1),this.checkHarmonicSupport(o,e)&&(l+=.02),c<=l&&r<n&&(n=r,s={tongue:a,frequency:t,targetFrequency:o,confidence:Math.max(0,1-c/l)})}return s}checkHarmonicSupport(t,e){if(!e.frequency||e.frequency.length<2)return!1;const s=t*2,n=t*3,i=.1;for(const o of e.frequency){const a=Math.abs(o-s)/s,r=Math.abs(o-n)/n;if(a<=i||r<=i)return!0}return!1}stopListening(){this.isListening&&(this.isListening=!1,this.processor&&(this.processor.disconnect(),this.processor=null),this.microphone&&(this.microphone.disconnect(),this.microphone=null),this.analyser&&(this.analyser.disconnect(),this.analyser=null),this.stream&&(this.stream.getTracks().forEach(t=>t.stop()),this.stream=null),this.audioContext&&this.audioContext.state!=="closed"&&(this.audioContext.close(),this.audioContext=null),console.log("Audio listening stopped"))}async testMicrophone(){try{const t=await navigator.mediaDevices.getUserMedia({audio:{sampleRate:this.sampleRate,channelCount:1}});return setTimeout(()=>{t.getTracks().forEach(e=>e.stop())},1e3),!0}catch(t){return console.error("Microphone test failed:",t),!1}}getAudioContextState(){return this.audioContext?this.audioContext.state:"closed"}getSampleRate(){return this.audioContext?this.audioContext.sampleRate:this.sampleRate}}const f={major:[0,2,4,5,7,9,11],minor:[0,2,3,5,7,8,10],pentatonic:[0,2,4,7,9],minorPentatonic:[0,3,5,7,10],dorian:[0,2,3,5,7,9,10],mixolydian:[0,2,4,5,7,9,10],lydian:[0,2,4,6,7,9,11],akebono:[0,2,3,7,8],hijaz:[0,1,4,5,7,8,11]},p={C:0,"C#":1,Db:1,D:2,"D#":3,Eb:3,E:4,F:5,"F#":6,Gb:6,G:7,"G#":8,Ab:8,A:9,"A#":10,Bb:10,B:11},v={"D Major 15-note":{noteCount:15,key:"D",scaleType:"major",rootOctave:4,layout:null},"G Minor 13-note":{noteCount:13,key:"G",scaleType:"minor",rootOctave:4,layout:null},"C Pentatonic 11-note":{noteCount:11,key:"C",scaleType:"pentatonic",rootOctave:4,layout:null},"A Minor Pentatonic 9-note":{noteCount:9,key:"A",scaleType:"minorPentatonic",rootOctave:4,layout:null},"F Akebono 8-note":{noteCount:8,key:"F",scaleType:"akebono",rootOctave:4,layout:null}};class C{constructor(t={}){this.config={noteCount:t.noteCount||15,key:t.key||"D",scaleType:t.scaleType||"major",rootOctave:t.rootOctave||4},this.customLayouts=new Map,this.loadPresetsFromStorage()}updateConfig(t){this.config={...this.config,...t}}getConfig(){return{...this.config}}getTongueFrequency(t){if(t<1||t>this.config.noteCount)return null;const e=this.getNoteFrequency(this.config.key,this.config.rootOctave),s=f[this.config.scaleType]||f.major,n=(t-1)%s.length,i=Math.floor((t-1)/s.length),o=s[n]+i*12;return e*Math.pow(2,o/12)}getTongueFrequencies(){const t={};for(let e=1;e<=this.config.noteCount;e++)t[e]=this.getTongueFrequency(e);return t}getNoteFrequency(t,e){const s=p[t]||0,n=(e-4)*12+s-9;return 440*Math.pow(2,n/12)}generateDefaultLayout(){const t={};for(let i=1;i<=this.config.noteCount;i++){const o=2*Math.PI*(i-1)/this.config.noteCount-Math.PI/2,a=300+Math.cos(o)*200,r=300+Math.sin(o)*200;t[i]={x:a,y:r}}return{name:`Default ${this.config.noteCount}-Note Layout`,positions:t}}loadPreset(t){const e=v[t];return e?(this.updateConfig({noteCount:e.noteCount,key:e.key,scaleType:e.scaleType,rootOctave:e.rootOctave}),e.layout):(console.warn(`Preset "${t}" not found`),null)}saveCustomLayout(t){this.customLayouts.set(t.name,t),this.savePresetsToStorage()}getCustomLayout(t){return this.customLayouts.get(t)}getAllPresets(){const t={...v};for(const[e,s]of this.customLayouts)t[e]={noteCount:this.config.noteCount,key:this.config.key,scaleType:this.config.scaleType,rootOctave:this.config.rootOctave,layout:s};return t}getDrumInfo(){const t=this.config.scaleType.charAt(0).toUpperCase()+this.config.scaleType.slice(1);return`${this.config.noteCount}-Note ${this.config.key} ${t}`}getTongueNoteName(t){if(t<1||t>this.config.noteCount)return"Invalid";const e=f[this.config.scaleType]||f.major,s=(t-1)%e.length,n=Math.floor((t-1)/e.length),i=p[this.config.key]||0,o=(i+e[s])%12,a=this.config.rootOctave+n+Math.floor((i+e[s])/12);return`${["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][o]}${a}`}analyzeFrequency(t){const s=Math.round(12*Math.log2(t/440)),n=440*Math.pow(2,s/12),i=Math.round(1200*Math.log2(t/n)),o=(s+9)%12,a=4+Math.floor((s+9)/12),c=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][o<0?o+12:o];return{frequency:t,closestNote:`${c}${a}`,closestFrequency:n,centsOff:i,inTune:Math.abs(i)<=10}}validateSequence(t){if(!t||t.length===0)return{valid:!1,reason:"Empty sequence"};for(const e of t){const s=typeof e=="object"?e.tongue:e;if(s<1||s>this.config.noteCount)return{valid:!1,reason:`Invalid tongue number: ${s}`}}for(let e=1;e<t.length;e++){const s=typeof t[e-1]=="object"?t[e-1].tongue:t[e-1],n=typeof t[e]=="object"?t[e].tongue:t[e],i=this.getTongueFrequency(s),o=this.getTongueFrequency(n);if(Math.abs(Math.log2(o/i))>2)return{valid:!1,reason:`Large melodic jump between tongues ${s} and ${n}`}}return{valid:!0}}savePresetsToStorage(){try{const t={};for(const[e,s]of this.customLayouts)t[e]=s;localStorage.setItem("tongueDrumCustomLayouts",JSON.stringify(t))}catch(t){console.warn("Failed to save custom layouts to storage:",t)}}loadPresetsFromStorage(){try{const t=localStorage.getItem("tongueDrumCustomLayouts");if(t){const e=JSON.parse(t);for(const[s,n]of Object.entries(e))this.customLayouts.set(s,n)}}catch(t){console.warn("Failed to load custom layouts from storage:",t)}}exportConfig(){return{config:this.config,customLayouts:Object.fromEntries(this.customLayouts),timestamp:new Date().toISOString()}}importConfig(t){try{if(t.config&&this.updateConfig(t.config),t.customLayouts){this.customLayouts.clear();for(const[e,s]of Object.entries(t.customLayouts))this.customLayouts.set(e,s);this.savePresetsToStorage()}return!0}catch(e){return console.error("Failed to import configuration:",e),!1}}}class L{constructor(t){if(this.container=t,this.drumElement=t.querySelector("#drumVisual"),this.centerElement=t.querySelector("#centerNote"),!this.drumElement||!this.centerElement)throw new Error("Required drum elements not found");this.configManager=new C({noteCount:15,key:"D",scaleType:"major",rootOctave:4}),this.customLayout=null,this.onTongueClick=null,this.updateDrumVisual()}updateConfiguration(t){this.configManager.updateConfig(t),this.updateDrumVisual()}setCustomLayout(t){this.customLayout=t,this.updateDrumVisual()}onTongueClicked(t){this.onTongueClick=t}highlightTongue(t,e=500){const s=this.drumElement.querySelector(`[data-tongue="${t}"]`);s&&(this.clearHighlights(),s.classList.add("playing"),setTimeout(()=>{s.classList.remove("playing")},e))}showNextTongue(t){this.drumElement.querySelectorAll(".tongue").forEach(s=>{s.classList.remove("next")});const e=this.drumElement.querySelector(`[data-tongue="${t}"]`);e&&e.classList.add("next")}clearHighlights(){this.drumElement.querySelectorAll(".tongue").forEach(t=>{t.classList.remove("playing","next")})}getConfiguration(){return this.configManager.getConfig()}getTongueFrequencies(){return this.configManager.getTongueFrequencies()}updateDrumVisual(){const t=this.configManager.getConfig();this.drumElement.className=`drum-visual drum-${t.noteCount}`,this.centerElement.className=`center-note center-${t.noteCount}`,this.centerElement.textContent="0",this.drumElement.querySelectorAll(".tongue, .draggable-tongue").forEach(s=>s.remove()),this.customLayout?this.generateCustomLayout():this.generateCircularLayout()}generateCustomLayout(){if(!this.customLayout)return;const t=this.configManager.getConfig(),e=this.customLayout.positions;for(let s=1;s<=t.noteCount;s++){const n=document.createElement("div");if(n.className=`tongue tongue-${t.noteCount}`,n.dataset.tongue=s.toString(),n.textContent=s.toString(),e[s]){const i=this.drumElement.getBoundingClientRect(),o=i.width||500,a=i.height||500,r=600,c=600,l=o/r,d=a/c,m=e[s].x*l,u=e[s].y*d;n.style.position="absolute",n.style.left=m+"px",n.style.top=u+"px"}else this.positionTongueCircularly(n,s,t.noteCount);n.addEventListener("click",()=>{this.onTongueClick&&this.onTongueClick(s)}),this.drumElement.appendChild(n)}}generateCircularLayout(){const t=this.configManager.getConfig();for(let e=1;e<=t.noteCount;e++){const s=document.createElement("div");s.className=`tongue tongue-${t.noteCount}`,s.dataset.tongue=e.toString(),s.textContent=e.toString(),this.positionTongueCircularly(s,e,t.noteCount),s.addEventListener("click",()=>{this.onTongueClick&&this.onTongueClick(e)}),this.drumElement.appendChild(s)}}positionTongueCircularly(t,e,s){const n=this.drumElement.getBoundingClientRect(),i=Math.max(n.width,n.height)/2-50,o=2*Math.PI*(e-1)/s-Math.PI/2,a=Math.cos(o)*i,r=Math.sin(o)*i;t.style.position="absolute",t.style.left=`calc(50% + ${a}px - 22px)`,t.style.top=`calc(50% + ${r}px - 35px)`}resize(){this.customLayout||this.updateDrumVisual()}getDrumInfo(){return this.configManager.getDrumInfo()}simulateNoteDetection(t){const e=this.configManager.getTongueFrequency(t);if(!e)return null;const s={tongue:t,confidence:.95,frequency:e,targetFrequency:e};return this.highlightTongue(t),s}loadPreset(t){const e=this.configManager.loadPreset(t);return e?this.setCustomLayout(e):this.setCustomLayout(null),this.updateDrumVisual(),!0}getTongueNoteName(t){return this.configManager.getTongueNoteName(t)}getAllPresets(){return this.configManager.getAllPresets()}showDetectionFeedback(t){this.highlightTongue(t.tongue,400);const e=this.drumElement.querySelector(`[data-tongue="${t.tongue}"]`);if(e&&t.confidence){const s=document.createElement("div");s.className="confidence-indicator",s.style.width=`${t.confidence*100}%`,e.appendChild(s),setTimeout(()=>{s.remove()},400)}}showFrequencyAnalysis(t){const e=this.configManager.analyzeFrequency(t),s=document.createElement("div");s.className="frequency-analysis",s.innerHTML=`
      <div class="detected-freq">${t.toFixed(1)} Hz</div>
      <div class="closest-note">${e.closestNote}</div>
      <div class="cents-off ${e.inTune?"in-tune":"out-of-tune"}">
        ${e.centsOff>0?"+":""}${e.centsOff} cents
      </div>
    `,this.container.appendChild(s),setTimeout(()=>{s.remove()},2e3)}exportDrumState(){return{configuration:this.getConfiguration(),customLayout:this.customLayout,drumInfo:this.getDrumInfo(),tongueFrequencies:this.getTongueFrequencies()}}importDrumState(t){return t.configuration&&this.updateConfiguration(t.configuration),t.customLayout&&this.setCustomLayout(t.customLayout),!0}}class q{constructor(t,e){if(this.container=t,this.drumConfig=e,this.selectorGrid=t.querySelector("#tongueSelector"),this.sequenceContainer=t.querySelector("#sequenceContainer"),this.playButton=t.querySelector("#playSequence"),this.clearButton=t.querySelector("#clearSequence"),this.exportButton=t.querySelector("#exportSequence"),this.closeButton=t.querySelector("#closeBuilder"),!this.selectorGrid||!this.sequenceContainer||!this.playButton||!this.clearButton||!this.exportButton||!this.closeButton)throw new Error("Required notation builder elements not found");this.sequence=[],this.isPlaying=!1,this.onSequenceChange=null,this.onSequenceExport=null,this.onClose=null,this.onTonguePlay=null,this.setupEventListeners(),this.createTongueSelector(),this.updateSequenceDisplay()}setupEventListeners(){this.playButton.addEventListener("click",()=>this.playSequence()),this.clearButton.addEventListener("click",()=>this.clearSequence()),this.exportButton.addEventListener("click",()=>this.exportSequence()),this.closeButton.addEventListener("click",()=>this.close())}updateConfiguration(t){this.drumConfig=t,this.createTongueSelector()}onSequenceChanged(t){this.onSequenceChange=t}onSequenceExported(t){this.onSequenceExport=t}onBuilderClosed(t){this.onClose=t}onTonguePlayback(t){this.onTonguePlay=t}createTongueSelector(){this.selectorGrid.innerHTML="";for(let t=1;t<=this.drumConfig.noteCount;t++){const e=document.createElement("div");e.className="selector-tongue",e.innerHTML=`
        <div class="tongue-number">${t}</div>
        <div class="octave-controls">
          <div class="octave-btn" data-octave="high" title="High octave">↑</div>
          <div class="octave-btn active" data-octave="middle" title="Middle octave">•</div>
          <div class="octave-btn" data-octave="low" title="Low octave">↓</div>
        </div>
      `,e.addEventListener("click",s=>{const n=s.target;n.classList.contains("octave-btn")?this.setOctaveForTongue(e,n.dataset.octave):n.closest(".octave-controls")||this.addNoteToSequence(t,this.getSelectedOctave(e))}),this.selectorGrid.appendChild(e)}}setOctaveForTongue(t,e){var s;t.querySelectorAll(".octave-btn").forEach(n=>{n.classList.remove("active")}),(s=t.querySelector(`[data-octave="${e}"]`))==null||s.classList.add("active")}getSelectedOctave(t){const e=t.querySelector(".octave-btn.active");return(e==null?void 0:e.dataset.octave)||"middle"}addNoteToSequence(t,e){const s={tongue:t,octave:e};this.sequence.push(s),this.updateSequenceDisplay(),this.onSequenceChange&&this.onSequenceChange([...this.sequence]),this.onTonguePlay&&this.onTonguePlay(t)}removeNoteFromSequence(t){t>=0&&t<this.sequence.length&&(this.sequence.splice(t,1),this.updateSequenceDisplay(),this.onSequenceChange&&this.onSequenceChange([...this.sequence]))}updateSequenceDisplay(){if(this.sequence.length===0){this.sequenceContainer.innerHTML='<div class="empty-sequence">Click tongue numbers above to start building your song!</div>';return}this.sequenceContainer.innerHTML="",this.sequence.forEach((t,e)=>{const s=document.createElement("div");s.className="sequence-note";const n=t.octave==="high"?'<div class="note-octave high">•</div>':t.octave==="low"?'<div class="note-octave low">•</div>':"";s.innerHTML=`
        <div class="note-number">${t.tongue}</div>
        ${n}
        <button class="note-remove" data-index="${e}">×</button>
      `,s.querySelector(".note-remove").addEventListener("click",o=>{o.stopPropagation(),this.removeNoteFromSequence(e)}),this.sequenceContainer.appendChild(s)})}async playSequence(){if(this.sequence.length===0){alert("Please add some notes to the sequence first!");return}if(!this.isPlaying){this.isPlaying=!0,this.playButton.textContent="⏸️ Playing...",this.playButton.setAttribute("disabled","true");try{for(let e=0;e<this.sequence.length;e++){const s=this.sequence[e],n=this.sequenceContainer.querySelectorAll(".sequence-note");n.forEach(i=>i.classList.remove("playing")),n[e]&&n[e].classList.add("playing"),this.onTonguePlay&&this.onTonguePlay(s.tongue),await new Promise(i=>setTimeout(i,600))}this.sequenceContainer.querySelectorAll(".sequence-note").forEach(e=>e.classList.remove("playing"))}finally{this.isPlaying=!1,this.playButton.textContent="▶️ Play Sequence",this.playButton.removeAttribute("disabled")}}}clearSequence(){this.sequence=[],this.updateSequenceDisplay(),this.onSequenceChange&&this.onSequenceChange([])}exportSequence(){if(this.sequence.length===0){alert("Please add some notes to the sequence first!");return}this.onSequenceExport&&this.onSequenceExport([...this.sequence])}close(){this.onClose&&this.onClose()}setVisible(t){this.container.style.display=t?"block":"none"}getSequence(){return[...this.sequence]}setSequence(t){this.sequence=[...t],this.updateSequenceDisplay(),this.onSequenceChange&&this.onSequenceChange([...this.sequence])}sequenceToNotation(){return this.sequence.map(t=>t.octave==="high"?`${t.tongue}^`:t.octave==="low"?`${t.tongue}v`:t.tongue)}static notationToSequence(t){return t.map(e=>typeof e=="string"?e.endsWith("^")?{tongue:parseInt(e.slice(0,-1)),octave:"high"}:e.endsWith("v")?{tongue:parseInt(e.slice(0,-1)),octave:"low"}:{tongue:parseInt(e),octave:"middle"}:{tongue:e,octave:"middle"})}generateRandomSequence(t=8){this.clearSequence();for(let e=0;e<t;e++){const s=Math.floor(Math.random()*this.drumConfig.noteCount)+1,n=["low","middle","high"],i=n[Math.floor(Math.random()*n.length)];this.addNoteToSequence(s,i)}}importSequence(t){try{let e;if(typeof t=="string")e=JSON.parse(t);else if(Array.isArray(t))e=t;else throw new Error("Invalid sequence format");if(!Array.isArray(e))throw new Error("Sequence must be an array");for(const s of e){if(!s.tongue||s.tongue<1||s.tongue>this.drumConfig.noteCount)throw new Error(`Invalid tongue number: ${s.tongue}`);if(s.octave&&!["low","middle","high"].includes(s.octave))throw new Error(`Invalid octave: ${s.octave}`)}return this.setSequence(e),!0}catch(e){return console.error("Failed to import sequence:",e),alert(`Failed to import sequence: ${e.message}`),!1}}getSequenceStats(){if(this.sequence.length===0)return null;const t={},e={low:0,middle:0,high:0};let s=new Set;for(const n of this.sequence)t[n.tongue]=(t[n.tongue]||0)+1,e[n.octave]=(e[n.octave]||0)+1,s.add(n.tongue);return{length:this.sequence.length,uniqueTongues:s.size,tongueUsage:t,octaveUsage:e,coverage:s.size/this.drumConfig.noteCount*100}}}class E{constructor(t,e){if(this.container=t,this.drumConfig=e,this.canvas=t.querySelector("#layoutCanvas"),this.saveButton=t.querySelector("#saveLayout"),this.resetButton=t.querySelector("#resetLayout"),this.closeButton=t.querySelector("#closeLayoutBuilder"),this.nameInput=t.querySelector("#layoutName"),!this.canvas||!this.saveButton||!this.resetButton||!this.closeButton||!this.nameInput)throw new Error("Required layout builder elements not found");this.currentLayout=this.generateDefaultLayout(),this.dragState={isDragging:!1,dragElement:null,dragOffset:{x:0,y:0}},this.onLayoutSaved=null,this.onClose=null,this.setupEventListeners(),this.createDraggableTongues()}setupEventListeners(){this.saveButton.addEventListener("click",()=>this.saveLayout()),this.resetButton.addEventListener("click",()=>this.resetLayout()),this.closeButton.addEventListener("click",()=>this.close()),this.canvas.addEventListener("mousedown",t=>this.handleMouseDown(t)),this.canvas.addEventListener("mousemove",t=>this.handleMouseMove(t)),this.canvas.addEventListener("mouseup",t=>this.handleMouseUp(t)),this.canvas.addEventListener("mouseleave",t=>this.handleMouseUp(t)),this.canvas.addEventListener("touchstart",t=>this.handleTouchStart(t)),this.canvas.addEventListener("touchmove",t=>this.handleTouchMove(t)),this.canvas.addEventListener("touchend",t=>this.handleTouchEnd(t))}updateConfiguration(t){this.drumConfig=t,this.currentLayout=this.generateDefaultLayout(),this.createDraggableTongues()}onLayoutSave(t){this.onLayoutSaved=t}onBuilderClosed(t){this.onClose=t}generateDefaultLayout(){const t={},e=this.canvas.getBoundingClientRect(),s=e.width/2||300,n=e.height/2||300,i=Math.min(s,n)-60;for(let o=1;o<=this.drumConfig.noteCount;o++){const a=2*Math.PI*(o-1)/this.drumConfig.noteCount-Math.PI/2,r=s+Math.cos(a)*i,c=n+Math.sin(a)*i;t[o]={x:r,y:c}}return{name:`Custom ${this.drumConfig.noteCount}-Note Layout`,positions:t}}createDraggableTongues(){this.canvas.innerHTML="";const t=document.createElement("div");t.className="layout-center",t.textContent="0",this.canvas.appendChild(t);for(let e=1;e<=this.drumConfig.noteCount;e++){const s=document.createElement("div");s.className="draggable-tongue",s.dataset.tongue=e.toString(),s.textContent=e.toString(),s.draggable=!1;const n=this.currentLayout.positions[e];n&&(s.style.left=n.x+"px",s.style.top=n.y+"px"),this.canvas.appendChild(s)}}handleMouseDown(t){const e=t.target;e.classList.contains("draggable-tongue")&&(t.preventDefault(),this.startDrag(e,t.clientX,t.clientY))}handleMouseMove(t){!this.dragState.isDragging||!this.dragState.dragElement||(t.preventDefault(),this.updateDragPosition(t.clientX,t.clientY))}handleMouseUp(t){this.dragState.isDragging&&this.endDrag()}handleTouchStart(t){const e=t.target;if(!e.classList.contains("draggable-tongue"))return;t.preventDefault();const s=t.touches[0];this.startDrag(e,s.clientX,s.clientY)}handleTouchMove(t){if(!this.dragState.isDragging||!this.dragState.dragElement)return;t.preventDefault();const e=t.touches[0];this.updateDragPosition(e.clientX,e.clientY)}handleTouchEnd(t){this.dragState.isDragging&&this.endDrag()}startDrag(t,e,s){this.canvas.getBoundingClientRect();const n=t.getBoundingClientRect();this.dragState={isDragging:!0,dragElement:t,dragOffset:{x:e-n.left,y:s-n.top}},t.classList.add("dragging"),this.canvas.classList.add("dragging-active")}updateDragPosition(t,e){if(!this.dragState.dragElement)return;const s=this.canvas.getBoundingClientRect();let n=t-s.left-this.dragState.dragOffset.x,i=e-s.top-this.dragState.dragOffset.y;const o=44,a=70;n=Math.max(0,Math.min(n,s.width-o)),i=Math.max(0,Math.min(i,s.height-a)),this.dragState.dragElement.style.left=n+"px",this.dragState.dragElement.style.top=i+"px"}endDrag(){if(!this.dragState.dragElement)return;const t=this.dragState.dragElement,e=parseInt(t.dataset.tongue||"0");e>0&&(this.currentLayout.positions[e]={x:parseFloat(t.style.left),y:parseFloat(t.style.top)}),t.classList.remove("dragging"),this.canvas.classList.remove("dragging-active"),this.dragState={isDragging:!1,dragElement:null,dragOffset:{x:0,y:0}}}saveLayout(){const t=this.nameInput.value.trim();if(!t){alert("Please enter a name for the layout"),this.nameInput.focus();return}const e={name:t,positions:{...this.currentLayout.positions}};this.onLayoutSaved&&this.onLayoutSaved(e),alert(`Layout "${t}" saved successfully!`)}resetLayout(){confirm("Reset all tongue positions to default circular layout?")&&(this.currentLayout=this.generateDefaultLayout(),this.createDraggableTongues())}close(){this.onClose&&this.onClose()}setVisible(t){this.container.style.display=t?"block":"none",t&&(this.nameInput.value=this.currentLayout.name||"")}loadLayout(t){this.currentLayout={name:t.name,positions:{...t.positions}},this.nameInput.value=t.name,this.createDraggableTongues()}getCurrentLayout(){return{name:this.currentLayout.name,positions:{...this.currentLayout.positions}}}autoArrangePattern(t){const e=this.canvas.getBoundingClientRect(),s=e.width/2||300,n=e.height/2||300,i={};switch(t){case"circle":const o=Math.min(s,n)-60;for(let u=1;u<=this.drumConfig.noteCount;u++){const g=2*Math.PI*(u-1)/this.drumConfig.noteCount-Math.PI/2;i[u]={x:s+Math.cos(g)*o,y:n+Math.sin(g)*o}}break;case"grid":const a=Math.ceil(Math.sqrt(this.drumConfig.noteCount)),r=Math.min(e.width,e.height)/(a+1);for(let u=1;u<=this.drumConfig.noteCount;u++){const g=Math.floor((u-1)/a),S=(u-1)%a;i[u]={x:r*(S+1),y:r*(g+1)}}break;case"spiral":let c=0,l=20;const d=15;for(let u=1;u<=this.drumConfig.noteCount;u++)i[u]={x:s+Math.cos(c)*l,y:n+Math.sin(c)*l},c+=.8,l+=d;break;case"line":const m=(e.width-80)/(this.drumConfig.noteCount-1);for(let u=1;u<=this.drumConfig.noteCount;u++)i[u]={x:40+(u-1)*m,y:n};break;default:console.warn(`Unknown pattern: ${t}`);return}this.currentLayout.positions=i,this.createDraggableTongues()}exportLayout(){const t={...this.getCurrentLayout(),drumConfig:this.drumConfig,timestamp:new Date().toISOString()},e=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),s=URL.createObjectURL(e),n=document.createElement("a");n.href=s,n.download=`tongue-drum-layout-${t.name.replace(/\s+/g,"-")}.json`,n.click(),URL.revokeObjectURL(s)}importLayout(t){try{let e;if(typeof t=="string"?e=JSON.parse(t):e=t,!e.name||!e.positions)throw new Error("Invalid layout format");return this.loadLayout(e),!0}catch(e){return console.error("Failed to import layout:",e),alert(`Failed to import layout: ${e.message}`),!1}}getLayoutStats(){const t=Object.values(this.currentLayout.positions);if(t.length===0)return null;const e=t.map(n=>n.x),s=t.map(n=>n.y);return{tongueCount:t.length,bounds:{minX:Math.min(...e),maxX:Math.max(...e),minY:Math.min(...s),maxY:Math.max(...s)},center:{x:e.reduce((n,i)=>n+i,0)/e.length,y:s.reduce((n,i)=>n+i,0)/s.length}}}}class T{constructor(){this.audioManager=null,this.drumVisualizer=null,this.notationBuilder=null,this.layoutBuilder=null,this.isListening=!1,this.currentConfig={noteCount:15,key:"D",scaleType:"major",rootOctave:4},this.detectionHistory=[],this.initializeElements(),this.setupEventListeners(),this.initializeComponents(),this.updateUI()}initializeElements(){this.setupPanel=document.querySelector(".setup-panel"),this.tabButtons=document.querySelectorAll(".tab"),this.tabPanels=document.querySelectorAll(".tab-content"),this.startButton=document.getElementById("startButton"),this.stopButton=null,this.testMicButton=document.getElementById("testMicrophone"),this.sensitivitySlider=this.createSensitivityControls(),this.sensitivityValue=document.getElementById("sensitivityValue"),this.detectionResults=document.getElementById("detectionResults"),this.audioInfo=document.querySelector(".audio-metrics"),this.statusMessage=document.getElementById("status"),this.progressBar=document.getElementById("progressFill"),this.drumSizeSelect=document.getElementById("noteCount"),this.keySelect=document.getElementById("drumKey"),this.scaleSelect=document.getElementById("scaleType"),this.octaveSelect=document.getElementById("rootOctave"),this.presetSelect=this.createPresetSelect(),this.loadPresetButton=document.getElementById("applyManualConfig"),this.notationToggle=document.getElementById("toggleBuilder"),this.layoutToggle=document.getElementById("loadPhoto"),this.autoDetectButton=document.getElementById("startDetection"),[this.setupPanel,this.startButton,this.testMicButton,this.audioInfo,this.statusMessage,this.drumSizeSelect,this.keySelect,this.scaleSelect].filter(s=>!s).length>0&&console.warn("Some optional DOM elements not found, but continuing...")}createSensitivityControls(){let t=document.getElementById("sensitivitySlider");if(t)return t;const e=document.querySelector(".controls");if(e){const s=document.createElement("div");return s.className="config-group",s.innerHTML=`
        <label for="sensitivitySlider">Detection Sensitivity</label>
        <div class="slider-container">
          <input type="range" id="sensitivitySlider" min="0.1" max="1.0" step="0.1" value="0.7">
          <span id="sensitivityValue">0.7</span>
        </div>
        <small>Higher = more sensitive</small>
      `,e.appendChild(s),document.getElementById("sensitivitySlider")}return null}createPresetSelect(){let t=document.getElementById("presetSelect");if(t)return t;const e=document.getElementById("manual-tab");if(e){const s=document.createElement("div");return s.className="config-group",s.innerHTML=`
        <label for="presetSelect">Quick Presets</label>
        <select id="presetSelect">
          <option value="">-- Select a preset --</option>
          <option value="D Major 15-note">D Major 15-note</option>
          <option value="G Minor 13-note">G Minor 13-note</option>
          <option value="C Pentatonic 11-note">C Pentatonic 11-note</option>
        </select>
      `,e.appendChild(s),document.getElementById("presetSelect")}return null}setupEventListeners(){this.tabButtons.forEach(t=>{t.addEventListener("click",e=>{const n=e.target.dataset.tab;n&&this.switchTab(n)})}),this.startButton&&this.startButton.addEventListener("click",()=>this.startListening()),this.autoDetectButton&&this.autoDetectButton.addEventListener("click",()=>this.startListening()),this.testMicButton&&this.testMicButton.addEventListener("click",()=>this.testMicrophone()),this.sensitivitySlider&&this.sensitivitySlider.addEventListener("input",()=>this.updateSensitivity()),this.drumSizeSelect&&this.drumSizeSelect.addEventListener("change",()=>this.updateConfiguration()),this.keySelect&&this.keySelect.addEventListener("change",()=>this.updateConfiguration()),this.scaleSelect&&this.scaleSelect.addEventListener("change",()=>this.updateConfiguration()),this.octaveSelect&&this.octaveSelect.addEventListener("change",()=>this.updateConfiguration()),this.loadPresetButton&&this.loadPresetButton.addEventListener("click",()=>this.updateConfiguration()),this.presetSelect&&this.presetSelect.addEventListener("change",()=>this.loadPreset()),this.notationToggle&&this.notationToggle.addEventListener("click",()=>this.toggleNotationBuilder()),window.addEventListener("resize",()=>{this.drumVisualizer&&this.drumVisualizer.resize()})}initializeComponents(){try{const t=document.querySelector(".drum-container");t?(this.drumVisualizer=new L(t),this.drumVisualizer.onTongueClicked(n=>this.handleTongueClick(n))):console.warn("Drum container not found, drum visualizer not initialized");const e=document.getElementById("notationBuilder");e?(this.notationBuilder=new q(e,this.currentConfig),this.notationBuilder.onSequenceChanged(n=>this.handleSequenceChange(n)),this.notationBuilder.onSequenceExported(n=>this.exportSequence(n)),this.notationBuilder.onBuilderClosed(()=>this.toggleNotationBuilder()),this.notationBuilder.onTonguePlayback(n=>this.playTongue(n)),this.notationBuilder.setVisible(!1)):console.warn("Notation builder container not found");const s=document.getElementById("layoutBuilder");s?(this.layoutBuilder=new E(s,this.currentConfig),this.layoutBuilder.onLayoutSave(n=>this.saveCustomLayout(n)),this.layoutBuilder.onBuilderClosed(()=>this.toggleLayoutBuilder()),this.layoutBuilder.setVisible(!1)):(console.warn("Layout builder container not found - using layout tab instead"),this.setupLayoutTabFunctionality()),console.log("🎵 Components initialized successfully!")}catch(t){console.error("Failed to initialize components:",t),this.showStatus("Application partially loaded - some features may be limited","warning")}}setupLayoutTabFunctionality(){document.getElementById("layoutCanvas")&&this.drumVisualizer&&console.log("Setting up basic layout functionality in layout tab")}switchTab(t){this.tabButtons.forEach(e=>{e.classList.toggle("active",e.dataset.tab===t)}),this.tabPanels.forEach(e=>{e.classList.toggle("active",e.id===`${t}Tab`)})}async startListening(){if(!(this.isListening||this.audioManager))try{if(this.showStatus("Initializing EssentiaJS audio analysis engine...","info"),this.setProgress(10),this.audioManager=new y({fftSize:4096,sensitivity:parseFloat(this.sensitivitySlider.value)||.7,cooldownTime:150}),this.setProgress(30),this.audioManager.onNoteDetected(t=>this.handleNoteDetection(t)),this.audioManager.onError(t=>this.showStatus(t,"error")),this.setProgress(50),this.drumVisualizer){const t=this.drumVisualizer.getTongueFrequencies();this.audioManager.updateTongueFrequencies(t)}this.setProgress(70),await this.audioManager.startListening(),this.setProgress(100),this.isListening=!0,this.updateUI(),this.showStatus("EssentiaJS audio analysis active - listening for tongue drum notes...","success"),this.updateAudioInfo(),setTimeout(()=>this.setProgress(0),1e3)}catch(t){console.error("Failed to start listening:",t),this.showStatus(`Failed to start listening: ${t.message}`,"error"),this.setProgress(0),this.audioManager=null}}stopListening(){!this.isListening||!this.audioManager||(this.audioManager.stopListening(),this.audioManager=null,this.isListening=!1,this.updateUI(),this.showStatus("Audio analysis stopped","info"),this.clearDetectionResults())}async testMicrophone(){try{this.showStatus("Testing microphone access...","info");const t=new y;await t.testMicrophone()?this.showStatus("Microphone test successful! EssentiaJS ready.","success"):this.showStatus("Microphone test failed","error"),t.stopListening()}catch(t){console.error("Microphone test failed:",t),this.showStatus(`Microphone test failed: ${t.message}`,"error")}}updateSensitivity(){const t=parseFloat(this.sensitivitySlider.value);this.sensitivityValue.textContent=t.toFixed(1),this.audioManager&&this.audioManager.setSensitivity(t)}updateConfiguration(){const t={noteCount:parseInt(this.drumSizeSelect.value),key:this.keySelect.value,scaleType:this.scaleSelect.value,rootOctave:parseInt(this.octaveSelect.value)};if(this.currentConfig=t,this.drumVisualizer&&this.drumVisualizer.updateConfiguration(t),this.notationBuilder&&this.notationBuilder.updateConfiguration(t),this.layoutBuilder&&this.layoutBuilder.updateConfiguration(t),this.audioManager&&this.drumVisualizer){const e=this.drumVisualizer.getTongueFrequencies();this.audioManager.updateTongueFrequencies(e)}this.updateAudioInfo()}loadPreset(){const t=this.presetSelect.value;t&&this.drumVisualizer&&(this.drumVisualizer.loadPreset(t)?(this.showStatus(`Loaded preset: ${t}`,"success"),this.updateAudioInfo()):this.showStatus(`Failed to load preset: ${t}`,"error"))}handleNoteDetection(t){this.detectionHistory.unshift(t),this.detectionHistory.length>10&&(this.detectionHistory=this.detectionHistory.slice(0,10)),this.drumVisualizer&&this.drumVisualizer.showDetectionFeedback(t),this.updateDetectionResults(),console.log(`EssentiaJS detected: Tongue ${t.tongue}, ${t.frequency.toFixed(1)}Hz, confidence: ${(t.confidence*100).toFixed(1)}%`)}handleTongueClick(t){this.playTongue(t),this.drumVisualizer&&this.drumVisualizer.simulateNoteDetection(t)}playTongue(t){if(this.drumVisualizer){const e=this.drumVisualizer.getTongueFrequencies()[t];e&&this.synthesizeTongueNote(e,.5),this.drumVisualizer.highlightTongue(t,300)}}synthesizeTongueNote(t,e){if(!window.AudioContext&&!window.webkitAudioContext){console.warn("Web Audio API not supported");return}try{const s=new(window.AudioContext||window.webkitAudioContext),n=s.createOscillator(),i=s.createGain();n.type="sine",n.frequency.setValueAtTime(t,s.currentTime);const o=s.currentTime;i.gain.setValueAtTime(0,o),i.gain.linearRampToValueAtTime(.3,o+.01),i.gain.exponentialRampToValueAtTime(.1,o+.1),i.gain.exponentialRampToValueAtTime(.05,o+e*.7),i.gain.exponentialRampToValueAtTime(.001,o+e),n.connect(i),i.connect(s.destination),n.start(o),n.stop(o+e)}catch(s){console.warn("Failed to synthesize note:",s)}}handleSequenceChange(t){console.log("Sequence updated:",t)}exportSequence(t){var a,r;const e=((a=this.notationBuilder)==null?void 0:a.sequenceToNotation())||[],s={drumConfig:this.currentConfig,sequence:t,notation:e,tongueFrequencies:((r=this.drumVisualizer)==null?void 0:r.getTongueFrequencies())||{},timestamp:new Date().toISOString(),version:"2.0-EssentiaJS"},n=new Blob([JSON.stringify(s,null,2)],{type:"application/json"}),i=URL.createObjectURL(n),o=document.createElement("a");o.href=i,o.download=`tongue-drum-sequence-${Date.now()}.json`,o.click(),URL.revokeObjectURL(i),this.showStatus("Sequence exported successfully!","success")}saveCustomLayout(t){this.drumVisualizer&&this.drumVisualizer.configManager&&this.drumVisualizer.configManager.saveCustomLayout(t);let e=!1;for(const s of this.presetSelect.options)if(s.value===t.name){e=!0;break}if(!e){const s=document.createElement("option");s.value=t.name,s.textContent=t.name,this.presetSelect.appendChild(s)}this.showStatus(`Layout "${t.name}" saved!`,"success")}toggleNotationBuilder(){if(!this.notationBuilder)return;const e=document.getElementById("notationBuilder").style.display!=="none";this.notationBuilder.setVisible(!e),this.notationToggle.textContent=e?"🎵 Show Notation Builder":"🎵 Hide Notation Builder"}toggleLayoutBuilder(){if(!this.layoutBuilder)return;const e=document.getElementById("layoutBuilder").style.display!=="none";this.layoutBuilder.setVisible(!e),this.layoutToggle.textContent=e?"🎯 Show Layout Builder":"🎯 Hide Layout Builder"}updateUI(){this.startButton&&(this.startButton.style.display=this.isListening?"none":"inline-block",this.startButton.textContent=this.isListening?"Stop Detection":"Start Detection"),this.autoDetectButton&&(this.autoDetectButton.textContent=this.isListening?"Stop Detection":"Start Detection"),this.stopButton&&(this.stopButton.style.display=this.isListening?"inline-block":"none"),this.drumSizeSelect&&(this.drumSizeSelect.disabled=this.isListening),this.keySelect&&(this.keySelect.disabled=this.isListening),this.scaleSelect&&(this.scaleSelect.disabled=this.isListening),this.octaveSelect&&(this.octaveSelect.disabled=this.isListening)}updateAudioInfo(){if(this.drumVisualizer){const t=this.drumVisualizer.getDrumInfo(),e=this.audioManager?this.audioManager.getAudioContextState():"closed",s=this.audioManager?this.audioManager.getSampleRate():"N/A";this.audioInfo.innerHTML=`
        <div class="audio-stat">
          <span class="stat-label">Configuration:</span>
          <span class="stat-value">${t}</span>
        </div>
        <div class="audio-stat">
          <span class="stat-label">Status:</span>
          <span class="stat-value">${this.isListening?"EssentiaJS Active":"Stopped"}</span>
        </div>
        <div class="audio-stat">
          <span class="stat-label">Sample Rate:</span>
          <span class="stat-value">${s} Hz</span>
        </div>
        <div class="audio-stat">
          <span class="stat-label">Audio Context:</span>
          <span class="stat-value">${e}</span>
        </div>
      `}}updateDetectionResults(){if(this.detectionHistory.length===0){this.detectionResults.innerHTML='<div class="no-results">No notes detected yet... (EssentiaJS ready)</div>';return}const t=this.detectionHistory.map(e=>`
      <div class="detection-result">
        <span class="tongue-number">Tongue ${e.tongue}</span>
        <span class="confidence ${e.confidence>.8?"high-confidence":e.confidence>.5?"medium-confidence":"low-confidence"}">
          ${(e.confidence*100).toFixed(1)}%
        </span>
        <span class="frequency">${e.frequency.toFixed(1)} Hz</span>
        ${e.targetFrequency?`<span class="target-freq">(target: ${e.targetFrequency.toFixed(1)}Hz)</span>`:""}
      </div>
    `).join("");this.detectionResults.innerHTML=t}clearDetectionResults(){this.detectionHistory=[],this.updateDetectionResults()}showStatus(t,e="info"){this.statusMessage.textContent=t,this.statusMessage.className=`status-message ${e}`,e!=="error"&&setTimeout(()=>{this.statusMessage.textContent="",this.statusMessage.className="status-message"},5e3)}setProgress(t){this.progressBar.style.width=`${t}%`,this.progressBar.style.display=t>0?"block":"none"}}document.addEventListener("DOMContentLoaded",()=>{try{new T,console.log("🎵 Tongue Drum Chum app initialized successfully with EssentiaJS! 🎵")}catch(h){console.error("Failed to initialize Tongue Drum Chum app:",h);const t=document.getElementById("statusMessage");t&&(t.textContent=`Failed to initialize app: ${h.message}`,t.className="status-message error")}});
//# sourceMappingURL=index-i6-30fXZ.js.map
