{"version":3,"file":"index-i6-30fXZ.js","sources":["../../src/audio/audioManager.js","../../src/utils/drumConfig.js","../../src/components/DrumVisualizer.js","../../src/components/NotationBuilder.js","../../src/components/LayoutBuilder.js","../../src/main.js"],"sourcesContent":["// EssentiaJS import - temporarily disabled to ensure Web Audio API fallback works\n// import Essentia from 'essentia.js';\n\n/**\n * Enhanced Web Audio API manager powered by EssentiaJS\n * Provides superior audio analysis and pitch detection for tongue drums\n */\nexport class AudioManager {\n  constructor(options = {}) {\n    this.audioContext = null;\n    this.analyser = null;\n    this.microphone = null;\n    this.stream = null;\n    this.essentia = null;\n    this.isListening = false;\n    this.animationFrame = null;\n    \n    // Configuration\n    this.fftSize = options.fftSize || 4096;\n    this.sampleRate = 44100;\n    this.sensitivity = options.sensitivity || 0.7;\n    this.cooldownTime = options.cooldownTime || 150;\n    this.lastDetectionTime = 0;\n    \n    // Callbacks\n    this.onNoteDetectedCallback = null;\n    this.onErrorCallback = null;\n    \n    // Tongue frequency mapping\n    this.tongueFrequencies = {};\n    \n    // Audio buffers for EssentiaJS\n    this.audioBuffer = new Float32Array(this.fftSize);\n    this.bufferIndex = 0;\n    this.bufferFilled = false;\n    \n    this.initializeEssentia();\n  }\n\n  /**\n   * Initialize EssentiaJS for advanced audio analysis\n   */\n  async initializeEssentia() {\n    // EssentiaJS temporarily disabled - using reliable Web Audio API fallback\n    console.log('🎵 Using Web Audio API for pitch detection (EssentiaJS integration in progress)');\n    this.essentia = null;\n    return Promise.resolve();\n  }\n\n  /**\n   * Set callback for note detection events\n   */\n  onNoteDetected(callback) {\n    this.onNoteDetectedCallback = callback;\n  }\n\n  /**\n   * Set callback for error events\n   */\n  onError(callback) {\n    this.onErrorCallback = callback;\n  }\n\n  /**\n   * Update tongue frequency mappings\n   */\n  updateTongueFrequencies(frequencies) {\n    this.tongueFrequencies = { ...frequencies };\n  }\n\n  /**\n   * Set detection sensitivity (0.0 to 1.0)\n   */\n  setSensitivity(sensitivity) {\n    this.sensitivity = Math.max(0.0, Math.min(1.0, sensitivity));\n  }\n\n  /**\n   * Start listening for audio input\n   */\n  async startListening() {\n    if (this.isListening) return;\n\n    try {\n      // Request microphone access with enhanced constraints\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: false,\n          noiseSuppression: false,\n          autoGainControl: false,\n          sampleRate: this.sampleRate,\n          channelCount: 1\n        }\n      });\n\n      // Create audio context and nodes\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: this.sampleRate\n      });\n      \n      this.microphone = this.audioContext.createMediaStreamSource(this.stream);\n      this.analyser = this.audioContext.createAnalyser();\n      \n      // Configure analyser\n      this.analyser.fftSize = this.fftSize;\n      this.analyser.smoothingTimeConstant = 0.3;\n      this.analyser.minDecibels = -90;\n      this.analyser.maxDecibels = -10;\n\n      // Create a script processor for real-time audio analysis\n      this.processor = this.audioContext.createScriptProcessor(1024, 1, 1);\n      this.processor.onaudioprocess = (event) => {\n        this.processAudioFrame(event.inputBuffer.getChannelData(0));\n      };\n\n      // Connect audio graph\n      this.microphone.connect(this.analyser);\n      this.microphone.connect(this.processor);\n      this.processor.connect(this.audioContext.destination);\n\n      this.isListening = true;\n      console.log('Audio listening started');\n\n    } catch (error) {\n      console.error('Failed to start audio listening:', error);\n      if (this.onErrorCallback) {\n        this.onErrorCallback(`Microphone access failed: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Process real-time audio frames for pitch detection\n   */\n  processAudioFrame(inputData) {\n    if (!this.essentia || !this.isListening) return;\n\n    // Fill audio buffer\n    const framesToCopy = Math.min(inputData.length, this.audioBuffer.length - this.bufferIndex);\n    for (let i = 0; i < framesToCopy; i++) {\n      this.audioBuffer[this.bufferIndex + i] = inputData[i];\n    }\n    \n    this.bufferIndex += framesToCopy;\n    \n    // When buffer is full, analyze it\n    if (this.bufferIndex >= this.audioBuffer.length) {\n      this.bufferFilled = true;\n      this.bufferIndex = 0;\n      this.analyzeAudioBuffer();\n    }\n  }\n\n  /**\n   * Analyze audio buffer using EssentiaJS for pitch detection\n   */\n  analyzeAudioBuffer() {\n    if (!this.bufferFilled) return;\n\n    try {\n      if (this.essentia) {\n        // Use EssentiaJS for advanced analysis\n        this.analyzeWithEssentia();\n      } else {\n        // Fallback to basic Web Audio API analysis\n        this.analyzeWithWebAudio();\n      }\n    } catch (error) {\n      console.warn('Audio analysis error:', error);\n      // Fallback to basic analysis if EssentiaJS fails\n      this.analyzeWithWebAudio();\n    }\n  }\n\n  /**\n   * Advanced analysis using EssentiaJS\n   */\n  analyzeWithEssentia() {\n    try {\n      // Apply windowing to reduce spectral leakage\n      const windowedSignal = this.essentia.Windowing(this.audioBuffer, 'hann', true, true);\n      \n      // Compute FFT spectrum\n      const spectrum = this.essentia.Spectrum(windowedSignal);\n      \n      // Detect pitch using YIN algorithm\n      const pitchYinResult = this.essentia.PitchYin(this.audioBuffer, 0.1);\n      const pitchYin = pitchYinResult.pitch;\n      \n      if (pitchYin && pitchYin > 50 && pitchYin < 2000) {\n        this.processPitchDetection(pitchYin, spectrum);\n      }\n    } catch (error) {\n      console.warn('EssentiaJS analysis failed, falling back to basic analysis:', error);\n      this.analyzeWithWebAudio();\n    }\n  }\n\n  /**\n   * Basic analysis using Web Audio API as fallback\n   */\n  analyzeWithWebAudio() {\n    // Get frequency domain data from the existing analyser\n    const bufferLength = this.analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    this.analyser.getByteFrequencyData(dataArray);\n    \n    // Find the peak frequency\n    let maxIndex = 0;\n    let maxValue = 0;\n    \n    for (let i = 0; i < bufferLength; i++) {\n      if (dataArray[i] > maxValue) {\n        maxValue = dataArray[i];\n        maxIndex = i;\n      }\n    }\n    \n    // Convert bin index to frequency\n    const frequency = (maxIndex * this.audioContext.sampleRate) / (this.analyser.fftSize * 2);\n    \n    // Only process if we have a strong enough signal and reasonable frequency\n    if (maxValue > 50 && frequency > 50 && frequency < 2000) {\n      this.processPitchDetection(frequency, { confidence: maxValue / 255 });\n    }\n  }\n\n  /**\n   * Combine multiple pitch estimates for higher accuracy\n   */\n  combinePitchEstimates(pitchYin, pitchMelodia, spectralPeaks) {\n    const pitches = [];\n    \n    // Add YIN pitch if valid\n    if (pitchYin > 0) pitches.push(pitchYin);\n    \n    // Add Melodia pitch if valid\n    if (pitchMelodia > 0) pitches.push(pitchMelodia);\n    \n    // Add dominant spectral peak if it looks like a fundamental\n    if (spectralPeaks.frequency.length > 0) {\n      const dominantFreq = spectralPeaks.frequency[0];\n      if (dominantFreq > 50 && dominantFreq < 2000) {\n        pitches.push(dominantFreq);\n      }\n    }\n    \n    if (pitches.length === 0) return null;\n    \n    // Return median pitch for robustness\n    pitches.sort((a, b) => a - b);\n    const midIndex = Math.floor(pitches.length / 2);\n    return pitches.length % 2 === 0 \n      ? (pitches[midIndex - 1] + pitches[midIndex]) / 2\n      : pitches[midIndex];\n  }\n\n  /**\n   * Process detected pitch and map to tongue\n   */\n  processPitchDetection(frequency, spectralPeaks) {\n    const currentTime = Date.now();\n    \n    // Apply cooldown to prevent excessive triggering\n    if (currentTime - this.lastDetectionTime < this.cooldownTime) {\n      return;\n    }\n\n    // Find closest tongue frequency\n    const detection = this.findClosestTongue(frequency, spectralPeaks);\n    \n    if (detection && detection.confidence >= this.sensitivity) {\n      this.lastDetectionTime = currentTime;\n      \n      if (this.onNoteDetectedCallback) {\n        this.onNoteDetectedCallback(detection);\n      }\n    }\n  }\n\n  /**\n   * Find the closest tongue for a detected frequency\n   */\n  findClosestTongue(frequency, spectralPeaks) {\n    if (Object.keys(this.tongueFrequencies).length === 0) {\n      return null;\n    }\n\n    let bestMatch = null;\n    let smallestDifference = Infinity;\n    \n    // Check each tongue frequency\n    for (const [tongueStr, tongueFreq] of Object.entries(this.tongueFrequencies)) {\n      const tongue = parseInt(tongueStr);\n      const difference = Math.abs(frequency - tongueFreq);\n      const percentDifference = difference / tongueFreq;\n      \n      // Enhanced tolerance based on spectral characteristics\n      let tolerance = 0.06; // Base 6% tolerance\n      \n      // Increase tolerance for higher frequencies\n      if (tongueFreq > 800) tolerance = 0.08;\n      if (tongueFreq > 1200) tolerance = 0.10;\n      \n      // Check for harmonic relationships in spectral peaks\n      const hasHarmonicSupport = this.checkHarmonicSupport(tongueFreq, spectralPeaks);\n      if (hasHarmonicSupport) {\n        tolerance += 0.02; // Allow slightly more tolerance with harmonic support\n      }\n      \n      if (percentDifference <= tolerance && difference < smallestDifference) {\n        smallestDifference = difference;\n        bestMatch = {\n          tongue: tongue,\n          frequency: frequency,\n          targetFrequency: tongueFreq,\n          confidence: Math.max(0, 1 - (percentDifference / tolerance))\n        };\n      }\n    }\n    \n    return bestMatch;\n  }\n\n  /**\n   * Check for harmonic support in spectral peaks\n   */\n  checkHarmonicSupport(fundamental, spectralPeaks) {\n    if (!spectralPeaks.frequency || spectralPeaks.frequency.length < 2) {\n      return false;\n    }\n    \n    // Look for 2nd and 3rd harmonics\n    const secondHarmonic = fundamental * 2;\n    const thirdHarmonic = fundamental * 3;\n    \n    const tolerance = 0.1; // 10% tolerance for harmonics\n    \n    for (const peakFreq of spectralPeaks.frequency) {\n      const secondDiff = Math.abs(peakFreq - secondHarmonic) / secondHarmonic;\n      const thirdDiff = Math.abs(peakFreq - thirdHarmonic) / thirdHarmonic;\n      \n      if (secondDiff <= tolerance || thirdDiff <= tolerance) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Stop listening and clean up resources\n   */\n  stopListening() {\n    if (!this.isListening) return;\n\n    this.isListening = false;\n\n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n\n    if (this.microphone) {\n      this.microphone.disconnect();\n      this.microphone = null;\n    }\n\n    if (this.analyser) {\n      this.analyser.disconnect();\n      this.analyser = null;\n    }\n\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = null;\n    }\n\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n\n    console.log('Audio listening stopped');\n  }\n\n  /**\n   * Test microphone access and basic functionality\n   */\n  async testMicrophone() {\n    try {\n      const testStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: this.sampleRate,\n          channelCount: 1\n        }\n      });\n      \n      // Test for a short duration\n      setTimeout(() => {\n        testStream.getTracks().forEach(track => track.stop());\n      }, 1000);\n      \n      return true;\n    } catch (error) {\n      console.error('Microphone test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current audio context state\n   */\n  getAudioContextState() {\n    return this.audioContext ? this.audioContext.state : 'closed';\n  }\n\n  /**\n   * Get sampling rate information\n   */\n  getSampleRate() {\n    return this.audioContext ? this.audioContext.sampleRate : this.sampleRate;\n  }\n}\n","/**\n * Drum configuration utilities and scale mappings for tongue drums\n * Handles frequency calculations, layouts, and preset configurations\n */\n\n// Scale patterns in semitones relative to root note\nexport const SCALE_PATTERNS = {\n  major: [0, 2, 4, 5, 7, 9, 11],\n  minor: [0, 2, 3, 5, 7, 8, 10],\n  pentatonic: [0, 2, 4, 7, 9],\n  minorPentatonic: [0, 3, 5, 7, 10],\n  dorian: [0, 2, 3, 5, 7, 9, 10],\n  mixolydian: [0, 2, 4, 5, 7, 9, 10],\n  lydian: [0, 2, 4, 6, 7, 9, 11],\n  akebono: [0, 2, 3, 7, 8],\n  hijaz: [0, 1, 4, 5, 7, 8, 11]\n};\n\n// Note names to semitone offsets from C\nexport const NOTE_TO_SEMITONE = {\n  'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3, 'E': 4, 'F': 5,\n  'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8, 'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11\n};\n\n// Preset drum configurations with layouts and frequency mappings\nexport const DRUM_PRESETS = {\n  'D Major 15-note': {\n    noteCount: 15,\n    key: 'D',\n    scaleType: 'major',\n    rootOctave: 4,\n    layout: null\n  },\n  'G Minor 13-note': {\n    noteCount: 13,\n    key: 'G',\n    scaleType: 'minor',\n    rootOctave: 4,\n    layout: null\n  },\n  'C Pentatonic 11-note': {\n    noteCount: 11,\n    key: 'C',\n    scaleType: 'pentatonic',\n    rootOctave: 4,\n    layout: null\n  },\n  'A Minor Pentatonic 9-note': {\n    noteCount: 9,\n    key: 'A',\n    scaleType: 'minorPentatonic',\n    rootOctave: 4,\n    layout: null\n  },\n  'F Akebono 8-note': {\n    noteCount: 8,\n    key: 'F',\n    scaleType: 'akebono',\n    rootOctave: 4,\n    layout: null\n  }\n};\n\n/**\n * Drum configuration manager class\n */\nexport class DrumConfigManager {\n  constructor(config = {}) {\n    this.config = {\n      noteCount: config.noteCount || 15,\n      key: config.key || 'D',\n      scaleType: config.scaleType || 'major',\n      rootOctave: config.rootOctave || 4\n    };\n    \n    this.customLayouts = new Map();\n    this.loadPresetsFromStorage();\n  }\n\n  /**\n   * Update drum configuration\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * Calculate frequency for a specific tongue\n   */\n  getTongueFrequency(tongueNumber) {\n    if (tongueNumber < 1 || tongueNumber > this.config.noteCount) {\n      return null;\n    }\n    \n    // Get base frequency for root note in specified octave\n    const baseFrequency = this.getNoteFrequency(this.config.key, this.config.rootOctave);\n    \n    // Get scale pattern\n    const pattern = SCALE_PATTERNS[this.config.scaleType] || SCALE_PATTERNS.major;\n    \n    // Calculate note offset\n    const scaleIndex = (tongueNumber - 1) % pattern.length;\n    const octaveOffset = Math.floor((tongueNumber - 1) / pattern.length);\n    const semitoneOffset = pattern[scaleIndex] + (octaveOffset * 12);\n    \n    // Calculate frequency using equal temperament\n    return baseFrequency * Math.pow(2, semitoneOffset / 12);\n  }\n\n  /**\n   * Get all tongue frequencies as a mapping\n   */\n  getTongueFrequencies() {\n    const frequencies = {};\n    for (let i = 1; i <= this.config.noteCount; i++) {\n      frequencies[i] = this.getTongueFrequency(i);\n    }\n    return frequencies;\n  }\n\n  /**\n   * Get frequency for a specific note and octave\n   */\n  getNoteFrequency(note, octave) {\n    const semitoneOffset = NOTE_TO_SEMITONE[note] || 0;\n    // A4 = 440 Hz, calculate from there\n    const semitonesFromA4 = (octave - 4) * 12 + semitoneOffset - 9; // A is the 9th semitone\n    return 440 * Math.pow(2, semitonesFromA4 / 12);\n  }\n\n  /**\n   * Generate default circular layout for tongues\n   */\n  generateDefaultLayout() {\n    const positions = {};\n    const centerX = 300; // Canvas center\n    const centerY = 300;\n    const radius = 200;\n\n    for (let i = 1; i <= this.config.noteCount; i++) {\n      const angle = (2 * Math.PI * (i - 1)) / this.config.noteCount - Math.PI / 2;\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n      \n      positions[i] = { x, y };\n    }\n\n    return {\n      name: `Default ${this.config.noteCount}-Note Layout`,\n      positions: positions\n    };\n  }\n\n  /**\n   * Load a preset configuration\n   */\n  loadPreset(presetName) {\n    const preset = DRUM_PRESETS[presetName];\n    if (!preset) {\n      console.warn(`Preset \"${presetName}\" not found`);\n      return null;\n    }\n\n    this.updateConfig({\n      noteCount: preset.noteCount,\n      key: preset.key,\n      scaleType: preset.scaleType,\n      rootOctave: preset.rootOctave\n    });\n\n    return preset.layout;\n  }\n\n  /**\n   * Save custom layout\n   */\n  saveCustomLayout(layout) {\n    this.customLayouts.set(layout.name, layout);\n    this.savePresetsToStorage();\n  }\n\n  /**\n   * Get custom layout by name\n   */\n  getCustomLayout(name) {\n    return this.customLayouts.get(name);\n  }\n\n  /**\n   * Get all available presets (built-in + custom)\n   */\n  getAllPresets() {\n    const presets = { ...DRUM_PRESETS };\n    \n    // Add custom layouts\n    for (const [name, layout] of this.customLayouts) {\n      presets[name] = {\n        noteCount: this.config.noteCount,\n        key: this.config.key,\n        scaleType: this.config.scaleType,\n        rootOctave: this.config.rootOctave,\n        layout: layout\n      };\n    }\n    \n    return presets;\n  }\n\n  /**\n   * Get formatted drum information string\n   */\n  getDrumInfo() {\n    const scaleDisplayName = this.config.scaleType.charAt(0).toUpperCase() + \n                           this.config.scaleType.slice(1);\n    return `${this.config.noteCount}-Note ${this.config.key} ${scaleDisplayName}`;\n  }\n\n  /**\n   * Get note name for a specific tongue\n   */\n  getTongueNoteName(tongueNumber) {\n    if (tongueNumber < 1 || tongueNumber > this.config.noteCount) {\n      return 'Invalid';\n    }\n    \n    const pattern = SCALE_PATTERNS[this.config.scaleType] || SCALE_PATTERNS.major;\n    const scaleIndex = (tongueNumber - 1) % pattern.length;\n    const octaveOffset = Math.floor((tongueNumber - 1) / pattern.length);\n    \n    // Calculate semitone offset from root\n    const rootSemitone = NOTE_TO_SEMITONE[this.config.key] || 0;\n    const noteSemitone = (rootSemitone + pattern[scaleIndex]) % 12;\n    const noteOctave = this.config.rootOctave + octaveOffset + \n                      Math.floor((rootSemitone + pattern[scaleIndex]) / 12);\n    \n    // Convert back to note name\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const noteName = noteNames[noteSemitone];\n    \n    return `${noteName}${noteOctave}`;\n  }\n\n  /**\n   * Analyze detected frequency and provide note information\n   */\n  analyzeFrequency(frequency) {\n    // Find closest semitone\n    const A4 = 440;\n    const semitoneFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const closestFrequency = A4 * Math.pow(2, semitoneFromA4 / 12);\n    const centsOff = Math.round(1200 * Math.log2(frequency / closestFrequency));\n    \n    // Calculate note name and octave\n    const noteIndex = (semitoneFromA4 + 9) % 12; // A4 is index 9\n    const octave = 4 + Math.floor((semitoneFromA4 + 9) / 12);\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const noteName = noteNames[noteIndex < 0 ? noteIndex + 12 : noteIndex];\n    \n    return {\n      frequency: frequency,\n      closestNote: `${noteName}${octave}`,\n      closestFrequency: closestFrequency,\n      centsOff: centsOff,\n      inTune: Math.abs(centsOff) <= 10\n    };\n  }\n\n  /**\n   * Validate if a tongue sequence is musically coherent\n   */\n  validateSequence(sequence) {\n    if (!sequence || sequence.length === 0) {\n      return { valid: false, reason: 'Empty sequence' };\n    }\n    \n    // Check if all tongue numbers are valid\n    for (const note of sequence) {\n      const tongueNumber = typeof note === 'object' ? note.tongue : note;\n      if (tongueNumber < 1 || tongueNumber > this.config.noteCount) {\n        return { valid: false, reason: `Invalid tongue number: ${tongueNumber}` };\n      }\n    }\n    \n    // Check for reasonable melodic intervals (no jumps > 2 octaves)\n    for (let i = 1; i < sequence.length; i++) {\n      const prevTongue = typeof sequence[i-1] === 'object' ? sequence[i-1].tongue : sequence[i-1];\n      const currTongue = typeof sequence[i] === 'object' ? sequence[i].tongue : sequence[i];\n      \n      const prevFreq = this.getTongueFrequency(prevTongue);\n      const currFreq = this.getTongueFrequency(currTongue);\n      \n      const interval = Math.abs(Math.log2(currFreq / prevFreq));\n      if (interval > 2) { // More than 2 octaves\n        return { \n          valid: false, \n          reason: `Large melodic jump between tongues ${prevTongue} and ${currTongue}` \n        };\n      }\n    }\n    \n    return { valid: true };\n  }\n\n  /**\n   * Save presets to localStorage\n   */\n  savePresetsToStorage() {\n    try {\n      const customData = {};\n      for (const [name, layout] of this.customLayouts) {\n        customData[name] = layout;\n      }\n      localStorage.setItem('tongueDrumCustomLayouts', JSON.stringify(customData));\n    } catch (error) {\n      console.warn('Failed to save custom layouts to storage:', error);\n    }\n  }\n\n  /**\n   * Load presets from localStorage\n   */\n  loadPresetsFromStorage() {\n    try {\n      const customData = localStorage.getItem('tongueDrumCustomLayouts');\n      if (customData) {\n        const layouts = JSON.parse(customData);\n        for (const [name, layout] of Object.entries(layouts)) {\n          this.customLayouts.set(name, layout);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load custom layouts from storage:', error);\n    }\n  }\n\n  /**\n   * Export configuration as JSON\n   */\n  exportConfig() {\n    return {\n      config: this.config,\n      customLayouts: Object.fromEntries(this.customLayouts),\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Import configuration from JSON\n   */\n  importConfig(data) {\n    try {\n      if (data.config) {\n        this.updateConfig(data.config);\n      }\n      \n      if (data.customLayouts) {\n        this.customLayouts.clear();\n        for (const [name, layout] of Object.entries(data.customLayouts)) {\n          this.customLayouts.set(name, layout);\n        }\n        this.savePresetsToStorage();\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to import configuration:', error);\n      return false;\n    }\n  }\n}\n","import { DrumConfigManager } from '../utils/drumConfig.js';\n\n/**\n * DrumVisualizer component handles the drum display and tongue interactions\n */\nexport class DrumVisualizer {\n  constructor(container) {\n    this.container = container;\n    this.drumElement = container.querySelector('#drumVisual');\n    this.centerElement = container.querySelector('#centerNote');\n    \n    if (!this.drumElement || !this.centerElement) {\n      throw new Error('Required drum elements not found');\n    }\n\n    // Initialize with default configuration\n    this.configManager = new DrumConfigManager({\n      noteCount: 15,\n      key: 'D',\n      scaleType: 'major',\n      rootOctave: 4\n    });\n\n    this.customLayout = null;\n    this.onTongueClick = null;\n\n    this.updateDrumVisual();\n  }\n\n  /**\n   * Update drum configuration and refresh visual\n   */\n  updateConfiguration(config) {\n    this.configManager.updateConfig(config);\n    this.updateDrumVisual();\n  }\n\n  /**\n   * Set custom layout for tongues\n   */\n  setCustomLayout(layout) {\n    this.customLayout = layout;\n    this.updateDrumVisual();\n  }\n\n  /**\n   * Set callback for tongue click events\n   */\n  onTongueClicked(callback) {\n    this.onTongueClick = callback;\n  }\n\n  /**\n   * Highlight a specific tongue (for note detection feedback)\n   */\n  highlightTongue(tongueNumber, duration = 500) {\n    const tongue = this.drumElement.querySelector(`[data-tongue=\"${tongueNumber}\"]`);\n    if (!tongue) return;\n\n    // Clear existing highlighting\n    this.clearHighlights();\n\n    // Add playing class\n    tongue.classList.add('playing');\n\n    // Remove highlighting after duration\n    setTimeout(() => {\n      tongue.classList.remove('playing');\n    }, duration);\n  }\n\n  /**\n   * Show which tongue should be played next\n   */\n  showNextTongue(tongueNumber) {\n    // Clear existing next indicators\n    this.drumElement.querySelectorAll('.tongue').forEach(t => {\n      t.classList.remove('next');\n    });\n\n    // Highlight the next tongue\n    const tongue = this.drumElement.querySelector(`[data-tongue=\"${tongueNumber}\"]`);\n    if (tongue) {\n      tongue.classList.add('next');\n    }\n  }\n\n  /**\n   * Clear all visual highlights\n   */\n  clearHighlights() {\n    this.drumElement.querySelectorAll('.tongue').forEach(tongue => {\n      tongue.classList.remove('playing', 'next');\n    });\n  }\n\n  /**\n   * Get current drum configuration\n   */\n  getConfiguration() {\n    return this.configManager.getConfig();\n  }\n\n  /**\n   * Get tongue frequencies mapping\n   */\n  getTongueFrequencies() {\n    return this.configManager.getTongueFrequencies();\n  }\n\n  /**\n   * Update the visual drum display\n   */\n  updateDrumVisual() {\n    const config = this.configManager.getConfig();\n    \n    // Update drum size class\n    this.drumElement.className = `drum-visual drum-${config.noteCount}`;\n    \n    // Update center note\n    this.centerElement.className = `center-note center-${config.noteCount}`;\n    this.centerElement.textContent = '0';\n    \n    // Clear existing tongues\n    const existingTongues = this.drumElement.querySelectorAll('.tongue, .draggable-tongue');\n    existingTongues.forEach(tongue => tongue.remove());\n    \n    // Generate new tongues\n    if (this.customLayout) {\n      this.generateCustomLayout();\n    } else {\n      this.generateCircularLayout();\n    }\n  }\n\n  /**\n   * Generate tongues using custom layout positions\n   */\n  generateCustomLayout() {\n    if (!this.customLayout) return;\n\n    const config = this.configManager.getConfig();\n    const positions = this.customLayout.positions;\n    \n    for (let i = 1; i <= config.noteCount; i++) {\n      const tongue = document.createElement('div');\n      tongue.className = `tongue tongue-${config.noteCount}`;\n      tongue.dataset.tongue = i.toString();\n      tongue.textContent = i.toString();\n      \n      // Use custom position if available, otherwise default\n      if (positions[i]) {\n        // Convert absolute positions to relative for the visual drum container\n        const drumRect = this.drumElement.getBoundingClientRect();\n        const drumWidth = drumRect.width || 500;\n        const drumHeight = drumRect.height || 500;\n        const canvasWidth = 600; // Original canvas width from layout builder\n        const canvasHeight = 600; // Original canvas height from layout builder\n        \n        const scaleX = drumWidth / canvasWidth;\n        const scaleY = drumHeight / canvasHeight;\n        \n        const x = positions[i].x * scaleX;\n        const y = positions[i].y * scaleY;\n        \n        tongue.style.position = 'absolute';\n        tongue.style.left = x + 'px';\n        tongue.style.top = y + 'px';\n      } else {\n        // Fallback to circular positioning\n        this.positionTongueCircularly(tongue, i, config.noteCount);\n      }\n      \n      // Add click handler\n      tongue.addEventListener('click', () => {\n        if (this.onTongueClick) {\n          this.onTongueClick(i);\n        }\n      });\n      \n      this.drumElement.appendChild(tongue);\n    }\n  }\n\n  /**\n   * Generate tongues in circular layout\n   */\n  generateCircularLayout() {\n    const config = this.configManager.getConfig();\n    \n    for (let i = 1; i <= config.noteCount; i++) {\n      const tongue = document.createElement('div');\n      tongue.className = `tongue tongue-${config.noteCount}`;\n      tongue.dataset.tongue = i.toString();\n      tongue.textContent = i.toString();\n      \n      this.positionTongueCircularly(tongue, i, config.noteCount);\n      \n      // Add click handler\n      tongue.addEventListener('click', () => {\n        if (this.onTongueClick) {\n          this.onTongueClick(i);\n        }\n      });\n      \n      this.drumElement.appendChild(tongue);\n    }\n  }\n\n  /**\n   * Position a tongue element in circular layout\n   */\n  positionTongueCircularly(tongue, index, totalCount) {\n    const drumRect = this.drumElement.getBoundingClientRect();\n    const radius = Math.max(drumRect.width, drumRect.height) / 2 - 50;\n    \n    // Calculate position in circle (start at top, -Math.PI/2)\n    const angle = (2 * Math.PI * (index - 1)) / totalCount - Math.PI / 2;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    \n    // Position relative to center\n    tongue.style.position = 'absolute';\n    tongue.style.left = `calc(50% + ${x}px - 22px)`; // Account for tongue width\n    tongue.style.top = `calc(50% + ${y}px - 35px)`; // Account for tongue height\n  }\n\n  /**\n   * Resize the drum visualization\n   */\n  resize() {\n    // Recalculate positions if using circular layout\n    if (!this.customLayout) {\n      this.updateDrumVisual();\n    }\n  }\n\n  /**\n   * Get formatted drum info string\n   */\n  getDrumInfo() {\n    return this.configManager.getDrumInfo();\n  }\n\n  /**\n   * Simulate note detection for testing\n   */\n  simulateNoteDetection(tongueNumber) {\n    const frequency = this.configManager.getTongueFrequency(tongueNumber);\n    if (!frequency) return null;\n\n    const detection = {\n      tongue: tongueNumber,\n      confidence: 0.95,\n      frequency: frequency,\n      targetFrequency: frequency\n    };\n\n    this.highlightTongue(tongueNumber);\n    return detection;\n  }\n\n  /**\n   * Load a preset configuration\n   */\n  loadPreset(presetName) {\n    const customLayout = this.configManager.loadPreset(presetName);\n    if (customLayout) {\n      this.setCustomLayout(customLayout);\n    } else {\n      this.setCustomLayout(null);\n    }\n    this.updateDrumVisual();\n    return true;\n  }\n\n  /**\n   * Get note name for a specific tongue\n   */\n  getTongueNoteName(tongueNumber) {\n    return this.configManager.getTongueNoteName(tongueNumber);\n  }\n\n  /**\n   * Get all available presets\n   */\n  getAllPresets() {\n    return this.configManager.getAllPresets();\n  }\n\n  /**\n   * Add visual feedback for successful note detection\n   */\n  showDetectionFeedback(detection) {\n    this.highlightTongue(detection.tongue, 400);\n    \n    // Add confidence indicator\n    const tongue = this.drumElement.querySelector(`[data-tongue=\"${detection.tongue}\"]`);\n    if (tongue && detection.confidence) {\n      const confidenceBar = document.createElement('div');\n      confidenceBar.className = 'confidence-indicator';\n      confidenceBar.style.width = `${detection.confidence * 100}%`;\n      tongue.appendChild(confidenceBar);\n      \n      setTimeout(() => {\n        confidenceBar.remove();\n      }, 400);\n    }\n  }\n\n  /**\n   * Show frequency analysis overlay\n   */\n  showFrequencyAnalysis(frequency) {\n    const analysis = this.configManager.analyzeFrequency(frequency);\n    \n    // Create temporary display element\n    const display = document.createElement('div');\n    display.className = 'frequency-analysis';\n    display.innerHTML = `\n      <div class=\"detected-freq\">${frequency.toFixed(1)} Hz</div>\n      <div class=\"closest-note\">${analysis.closestNote}</div>\n      <div class=\"cents-off ${analysis.inTune ? 'in-tune' : 'out-of-tune'}\">\n        ${analysis.centsOff > 0 ? '+' : ''}${analysis.centsOff} cents\n      </div>\n    `;\n    \n    this.container.appendChild(display);\n    \n    setTimeout(() => {\n      display.remove();\n    }, 2000);\n  }\n\n  /**\n   * Export current drum state\n   */\n  exportDrumState() {\n    return {\n      configuration: this.getConfiguration(),\n      customLayout: this.customLayout,\n      drumInfo: this.getDrumInfo(),\n      tongueFrequencies: this.getTongueFrequencies()\n    };\n  }\n\n  /**\n   * Import drum state\n   */\n  importDrumState(state) {\n    if (state.configuration) {\n      this.updateConfiguration(state.configuration);\n    }\n    \n    if (state.customLayout) {\n      this.setCustomLayout(state.customLayout);\n    }\n    \n    return true;\n  }\n}\n","/**\n * NotationBuilder component for creating visual sequences\n */\nexport class NotationBuilder {\n  constructor(container, drumConfig) {\n    this.container = container;\n    this.drumConfig = drumConfig;\n\n    // Get required elements\n    this.selectorGrid = container.querySelector('#tongueSelector');\n    this.sequenceContainer = container.querySelector('#sequenceContainer');\n    this.playButton = container.querySelector('#playSequence');\n    this.clearButton = container.querySelector('#clearSequence');\n    this.exportButton = container.querySelector('#exportSequence');\n    this.closeButton = container.querySelector('#closeBuilder');\n\n    if (!this.selectorGrid || !this.sequenceContainer || !this.playButton || \n        !this.clearButton || !this.exportButton || !this.closeButton) {\n      throw new Error('Required notation builder elements not found');\n    }\n\n    this.sequence = [];\n    this.isPlaying = false;\n    this.onSequenceChange = null;\n    this.onSequenceExport = null;\n    this.onClose = null;\n    this.onTonguePlay = null;\n\n    this.setupEventListeners();\n    this.createTongueSelector();\n    this.updateSequenceDisplay();\n  }\n\n  /**\n   * Set up event listeners for builder controls\n   */\n  setupEventListeners() {\n    this.playButton.addEventListener('click', () => this.playSequence());\n    this.clearButton.addEventListener('click', () => this.clearSequence());\n    this.exportButton.addEventListener('click', () => this.exportSequence());\n    this.closeButton.addEventListener('click', () => this.close());\n  }\n\n  /**\n   * Update drum configuration and regenerate selector\n   */\n  updateConfiguration(config) {\n    this.drumConfig = config;\n    this.createTongueSelector();\n  }\n\n  /**\n   * Set callback for sequence changes\n   */\n  onSequenceChanged(callback) {\n    this.onSequenceChange = callback;\n  }\n\n  /**\n   * Set callback for sequence export\n   */\n  onSequenceExported(callback) {\n    this.onSequenceExport = callback;\n  }\n\n  /**\n   * Set callback for builder close\n   */\n  onBuilderClosed(callback) {\n    this.onClose = callback;\n  }\n\n  /**\n   * Set callback for tongue play events\n   */\n  onTonguePlayback(callback) {\n    this.onTonguePlay = callback;\n  }\n\n  /**\n   * Create the tongue selector grid\n   */\n  createTongueSelector() {\n    this.selectorGrid.innerHTML = '';\n    \n    for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n      const tongueDiv = document.createElement('div');\n      tongueDiv.className = 'selector-tongue';\n      tongueDiv.innerHTML = `\n        <div class=\"tongue-number\">${i}</div>\n        <div class=\"octave-controls\">\n          <div class=\"octave-btn\" data-octave=\"high\" title=\"High octave\">↑</div>\n          <div class=\"octave-btn active\" data-octave=\"middle\" title=\"Middle octave\">•</div>\n          <div class=\"octave-btn\" data-octave=\"low\" title=\"Low octave\">↓</div>\n        </div>\n      `;\n      \n      // Add click handlers\n      tongueDiv.addEventListener('click', (e) => {\n        const target = e.target;\n        if (target.classList.contains('octave-btn')) {\n          this.setOctaveForTongue(tongueDiv, target.dataset.octave);\n        } else if (!target.closest('.octave-controls')) {\n          this.addNoteToSequence(i, this.getSelectedOctave(tongueDiv));\n        }\n      });\n      \n      this.selectorGrid.appendChild(tongueDiv);\n    }\n  }\n\n  /**\n   * Set octave selection for a tongue\n   */\n  setOctaveForTongue(tongueDiv, octave) {\n    // Update octave button states\n    tongueDiv.querySelectorAll('.octave-btn').forEach(btn => {\n      btn.classList.remove('active');\n    });\n    tongueDiv.querySelector(`[data-octave=\"${octave}\"]`)?.classList.add('active');\n  }\n\n  /**\n   * Get selected octave for a tongue\n   */\n  getSelectedOctave(tongueDiv) {\n    const activeBtn = tongueDiv.querySelector('.octave-btn.active');\n    return activeBtn?.dataset.octave || 'middle';\n  }\n\n  /**\n   * Add a note to the sequence\n   */\n  addNoteToSequence(tongueNumber, octave) {\n    const note = {\n      tongue: tongueNumber,\n      octave: octave\n    };\n    \n    this.sequence.push(note);\n    this.updateSequenceDisplay();\n    \n    // Trigger callbacks\n    if (this.onSequenceChange) {\n      this.onSequenceChange([...this.sequence]);\n    }\n    \n    if (this.onTonguePlay) {\n      this.onTonguePlay(tongueNumber);\n    }\n  }\n\n  /**\n   * Remove a note from the sequence\n   */\n  removeNoteFromSequence(index) {\n    if (index >= 0 && index < this.sequence.length) {\n      this.sequence.splice(index, 1);\n      this.updateSequenceDisplay();\n      \n      if (this.onSequenceChange) {\n        this.onSequenceChange([...this.sequence]);\n      }\n    }\n  }\n\n  /**\n   * Update the sequence display\n   */\n  updateSequenceDisplay() {\n    if (this.sequence.length === 0) {\n      this.sequenceContainer.innerHTML = '<div class=\"empty-sequence\">Click tongue numbers above to start building your song!</div>';\n      return;\n    }\n    \n    this.sequenceContainer.innerHTML = '';\n    \n    this.sequence.forEach((note, index) => {\n      const noteDiv = document.createElement('div');\n      noteDiv.className = 'sequence-note';\n      \n      const octaveMarker = note.octave === 'high' \n        ? '<div class=\"note-octave high\">•</div>'\n        : note.octave === 'low' \n        ? '<div class=\"note-octave low\">•</div>'\n        : '';\n      \n      noteDiv.innerHTML = `\n        <div class=\"note-number\">${note.tongue}</div>\n        ${octaveMarker}\n        <button class=\"note-remove\" data-index=\"${index}\">×</button>\n      `;\n      \n      // Add remove handler\n      const removeBtn = noteDiv.querySelector('.note-remove');\n      removeBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.removeNoteFromSequence(index);\n      });\n      \n      this.sequenceContainer.appendChild(noteDiv);\n    });\n  }\n\n  /**\n   * Play the current sequence\n   */\n  async playSequence() {\n    if (this.sequence.length === 0) {\n      alert('Please add some notes to the sequence first!');\n      return;\n    }\n    \n    if (this.isPlaying) return;\n    \n    this.isPlaying = true;\n    this.playButton.textContent = '⏸️ Playing...';\n    this.playButton.setAttribute('disabled', 'true');\n    \n    try {\n      for (let i = 0; i < this.sequence.length; i++) {\n        const note = this.sequence[i];\n        \n        // Highlight current note in sequence\n        const sequenceNotes = this.sequenceContainer.querySelectorAll('.sequence-note');\n        sequenceNotes.forEach(n => n.classList.remove('playing'));\n        if (sequenceNotes[i]) {\n          sequenceNotes[i].classList.add('playing');\n        }\n        \n        // Play note\n        if (this.onTonguePlay) {\n          this.onTonguePlay(note.tongue);\n        }\n        \n        // Wait before next note\n        await new Promise(resolve => setTimeout(resolve, 600));\n      }\n      \n      // Clear highlights\n      const sequenceNotes = this.sequenceContainer.querySelectorAll('.sequence-note');\n      sequenceNotes.forEach(n => n.classList.remove('playing'));\n      \n    } finally {\n      this.isPlaying = false;\n      this.playButton.textContent = '▶️ Play Sequence';\n      this.playButton.removeAttribute('disabled');\n    }\n  }\n\n  /**\n   * Clear the sequence\n   */\n  clearSequence() {\n    this.sequence = [];\n    this.updateSequenceDisplay();\n    \n    if (this.onSequenceChange) {\n      this.onSequenceChange([]);\n    }\n  }\n\n  /**\n   * Export the sequence\n   */\n  exportSequence() {\n    if (this.sequence.length === 0) {\n      alert('Please add some notes to the sequence first!');\n      return;\n    }\n    \n    if (this.onSequenceExport) {\n      this.onSequenceExport([...this.sequence]);\n    }\n  }\n\n  /**\n   * Close the builder\n   */\n  close() {\n    if (this.onClose) {\n      this.onClose();\n    }\n  }\n\n  /**\n   * Show/hide the builder\n   */\n  setVisible(visible) {\n    this.container.style.display = visible ? 'block' : 'none';\n  }\n\n  /**\n   * Get current sequence\n   */\n  getSequence() {\n    return [...this.sequence];\n  }\n\n  /**\n   * Set sequence (for loading saved sequences)\n   */\n  setSequence(sequence) {\n    this.sequence = [...sequence];\n    this.updateSequenceDisplay();\n    \n    if (this.onSequenceChange) {\n      this.onSequenceChange([...this.sequence]);\n    }\n  }\n\n  /**\n   * Convert sequence to simple notation format\n   */\n  sequenceToNotation() {\n    return this.sequence.map(note => {\n      if (note.octave === 'high') {\n        return `${note.tongue}^`;\n      } else if (note.octave === 'low') {\n        return `${note.tongue}v`;\n      } else {\n        return note.tongue;\n      }\n    });\n  }\n\n  /**\n   * Convert notation format to sequence\n   */\n  static notationToSequence(notation) {\n    return notation.map(note => {\n      if (typeof note === 'string') {\n        if (note.endsWith('^')) {\n          return {\n            tongue: parseInt(note.slice(0, -1)),\n            octave: 'high'\n          };\n        } else if (note.endsWith('v')) {\n          return {\n            tongue: parseInt(note.slice(0, -1)),\n            octave: 'low'\n          };\n        } else {\n          return {\n            tongue: parseInt(note),\n            octave: 'middle'\n          };\n        }\n      } else {\n        return {\n          tongue: note,\n          octave: 'middle'\n        };\n      }\n    });\n  }\n\n  /**\n   * Generate random sequence for testing\n   */\n  generateRandomSequence(length = 8) {\n    this.clearSequence();\n    \n    for (let i = 0; i < length; i++) {\n      const tongueNumber = Math.floor(Math.random() * this.drumConfig.noteCount) + 1;\n      const octaves = ['low', 'middle', 'high'];\n      const octave = octaves[Math.floor(Math.random() * octaves.length)];\n      \n      this.addNoteToSequence(tongueNumber, octave);\n    }\n  }\n\n  /**\n   * Import sequence from various formats\n   */\n  importSequence(data) {\n    try {\n      let sequence;\n      \n      if (typeof data === 'string') {\n        // Try to parse as JSON\n        sequence = JSON.parse(data);\n      } else if (Array.isArray(data)) {\n        sequence = data;\n      } else {\n        throw new Error('Invalid sequence format');\n      }\n      \n      // Validate sequence\n      if (!Array.isArray(sequence)) {\n        throw new Error('Sequence must be an array');\n      }\n      \n      for (const note of sequence) {\n        if (!note.tongue || note.tongue < 1 || note.tongue > this.drumConfig.noteCount) {\n          throw new Error(`Invalid tongue number: ${note.tongue}`);\n        }\n        if (note.octave && !['low', 'middle', 'high'].includes(note.octave)) {\n          throw new Error(`Invalid octave: ${note.octave}`);\n        }\n      }\n      \n      this.setSequence(sequence);\n      return true;\n      \n    } catch (error) {\n      console.error('Failed to import sequence:', error);\n      alert(`Failed to import sequence: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get sequence statistics\n   */\n  getSequenceStats() {\n    if (this.sequence.length === 0) {\n      return null;\n    }\n    \n    const tongueUsage = {};\n    const octaveUsage = { low: 0, middle: 0, high: 0 };\n    let totalTongues = new Set();\n    \n    for (const note of this.sequence) {\n      tongueUsage[note.tongue] = (tongueUsage[note.tongue] || 0) + 1;\n      octaveUsage[note.octave] = (octaveUsage[note.octave] || 0) + 1;\n      totalTongues.add(note.tongue);\n    }\n    \n    return {\n      length: this.sequence.length,\n      uniqueTongues: totalTongues.size,\n      tongueUsage: tongueUsage,\n      octaveUsage: octaveUsage,\n      coverage: (totalTongues.size / this.drumConfig.noteCount) * 100\n    };\n  }\n}\n","/**\n * LayoutBuilder component for creating custom drum layouts with drag-and-drop\n */\nexport class LayoutBuilder {\n  constructor(container, drumConfig) {\n    this.container = container;\n    this.drumConfig = drumConfig;\n\n    // Get required elements\n    this.canvas = container.querySelector('#layoutCanvas');\n    this.saveButton = container.querySelector('#saveLayout');\n    this.resetButton = container.querySelector('#resetLayout');\n    this.closeButton = container.querySelector('#closeLayoutBuilder');\n    this.nameInput = container.querySelector('#layoutName');\n\n    if (!this.canvas || !this.saveButton || !this.resetButton || \n        !this.closeButton || !this.nameInput) {\n      throw new Error('Required layout builder elements not found');\n    }\n\n    // Initialize with default circular layout\n    this.currentLayout = this.generateDefaultLayout();\n    \n    this.dragState = {\n      isDragging: false,\n      dragElement: null,\n      dragOffset: { x: 0, y: 0 }\n    };\n    \n    this.onLayoutSaved = null;\n    this.onClose = null;\n    \n    this.setupEventListeners();\n    this.createDraggableTongues();\n  }\n\n  /**\n   * Set up event listeners\n   */\n  setupEventListeners() {\n    this.saveButton.addEventListener('click', () => this.saveLayout());\n    this.resetButton.addEventListener('click', () => this.resetLayout());\n    this.closeButton.addEventListener('click', () => this.close());\n\n    // Canvas mouse events for dragging\n    this.canvas.addEventListener('mousedown', (e) => this.handleMouseDown(e));\n    this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));\n    this.canvas.addEventListener('mouseup', (e) => this.handleMouseUp(e));\n    this.canvas.addEventListener('mouseleave', (e) => this.handleMouseUp(e));\n\n    // Touch events for mobile\n    this.canvas.addEventListener('touchstart', (e) => this.handleTouchStart(e));\n    this.canvas.addEventListener('touchmove', (e) => this.handleTouchMove(e));\n    this.canvas.addEventListener('touchend', (e) => this.handleTouchEnd(e));\n  }\n\n  /**\n   * Update drum configuration and regenerate layout\n   */\n  updateConfiguration(config) {\n    this.drumConfig = config;\n    this.currentLayout = this.generateDefaultLayout();\n    this.createDraggableTongues();\n  }\n\n  /**\n   * Set callback for layout saved\n   */\n  onLayoutSave(callback) {\n    this.onLayoutSaved = callback;\n  }\n\n  /**\n   * Set callback for builder close\n   */\n  onBuilderClosed(callback) {\n    this.onClose = callback;\n  }\n\n  /**\n   * Generate default circular layout\n   */\n  generateDefaultLayout() {\n    const positions = {};\n    const canvasRect = this.canvas.getBoundingClientRect();\n    const centerX = canvasRect.width / 2 || 300;\n    const centerY = canvasRect.height / 2 || 300;\n    const radius = Math.min(centerX, centerY) - 60;\n\n    for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n      const angle = (2 * Math.PI * (i - 1)) / this.drumConfig.noteCount - Math.PI / 2;\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n      \n      positions[i] = { x, y };\n    }\n\n    return {\n      name: `Custom ${this.drumConfig.noteCount}-Note Layout`,\n      positions: positions\n    };\n  }\n\n  /**\n   * Create draggable tongue elements\n   */\n  createDraggableTongues() {\n    this.canvas.innerHTML = '';\n    \n    // Create center reference\n    const centerDiv = document.createElement('div');\n    centerDiv.className = 'layout-center';\n    centerDiv.textContent = '0';\n    this.canvas.appendChild(centerDiv);\n\n    // Create draggable tongues\n    for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n      const tongueDiv = document.createElement('div');\n      tongueDiv.className = 'draggable-tongue';\n      tongueDiv.dataset.tongue = i.toString();\n      tongueDiv.textContent = i.toString();\n      tongueDiv.draggable = false; // Use custom drag handling\n      \n      // Position according to current layout\n      const pos = this.currentLayout.positions[i];\n      if (pos) {\n        tongueDiv.style.left = pos.x + 'px';\n        tongueDiv.style.top = pos.y + 'px';\n      }\n      \n      this.canvas.appendChild(tongueDiv);\n    }\n  }\n\n  /**\n   * Handle mouse down for drag start\n   */\n  handleMouseDown(e) {\n    const target = e.target;\n    if (!target.classList.contains('draggable-tongue')) return;\n\n    e.preventDefault();\n    this.startDrag(target, e.clientX, e.clientY);\n  }\n\n  /**\n   * Handle mouse move for dragging\n   */\n  handleMouseMove(e) {\n    if (!this.dragState.isDragging || !this.dragState.dragElement) return;\n\n    e.preventDefault();\n    this.updateDragPosition(e.clientX, e.clientY);\n  }\n\n  /**\n   * Handle mouse up for drag end\n   */\n  handleMouseUp(e) {\n    if (this.dragState.isDragging) {\n      this.endDrag();\n    }\n  }\n\n  /**\n   * Handle touch start\n   */\n  handleTouchStart(e) {\n    const target = e.target;\n    if (!target.classList.contains('draggable-tongue')) return;\n\n    e.preventDefault();\n    const touch = e.touches[0];\n    this.startDrag(target, touch.clientX, touch.clientY);\n  }\n\n  /**\n   * Handle touch move\n   */\n  handleTouchMove(e) {\n    if (!this.dragState.isDragging || !this.dragState.dragElement) return;\n\n    e.preventDefault();\n    const touch = e.touches[0];\n    this.updateDragPosition(touch.clientX, touch.clientY);\n  }\n\n  /**\n   * Handle touch end\n   */\n  handleTouchEnd(e) {\n    if (this.dragState.isDragging) {\n      this.endDrag();\n    }\n  }\n\n  /**\n   * Start dragging a tongue element\n   */\n  startDrag(element, clientX, clientY) {\n    const canvasRect = this.canvas.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n    \n    this.dragState = {\n      isDragging: true,\n      dragElement: element,\n      dragOffset: {\n        x: clientX - elementRect.left,\n        y: clientY - elementRect.top\n      }\n    };\n    \n    element.classList.add('dragging');\n    this.canvas.classList.add('dragging-active');\n  }\n\n  /**\n   * Update drag position\n   */\n  updateDragPosition(clientX, clientY) {\n    if (!this.dragState.dragElement) return;\n\n    const canvasRect = this.canvas.getBoundingClientRect();\n    let x = clientX - canvasRect.left - this.dragState.dragOffset.x;\n    let y = clientY - canvasRect.top - this.dragState.dragOffset.y;\n    \n    // Constrain to canvas bounds\n    const tongueWidth = 44; // From CSS\n    const tongueHeight = 70; // From CSS\n    \n    x = Math.max(0, Math.min(x, canvasRect.width - tongueWidth));\n    y = Math.max(0, Math.min(y, canvasRect.height - tongueHeight));\n    \n    this.dragState.dragElement.style.left = x + 'px';\n    this.dragState.dragElement.style.top = y + 'px';\n  }\n\n  /**\n   * End dragging and update layout\n   */\n  endDrag() {\n    if (!this.dragState.dragElement) return;\n\n    const element = this.dragState.dragElement;\n    const tongueNumber = parseInt(element.dataset.tongue || '0');\n    \n    if (tongueNumber > 0) {\n      // Update layout position\n      this.currentLayout.positions[tongueNumber] = {\n        x: parseFloat(element.style.left),\n        y: parseFloat(element.style.top)\n      };\n    }\n    \n    element.classList.remove('dragging');\n    this.canvas.classList.remove('dragging-active');\n    \n    this.dragState = {\n      isDragging: false,\n      dragElement: null,\n      dragOffset: { x: 0, y: 0 }\n    };\n  }\n\n  /**\n   * Save the current layout\n   */\n  saveLayout() {\n    const layoutName = this.nameInput.value.trim();\n    if (!layoutName) {\n      alert('Please enter a name for the layout');\n      this.nameInput.focus();\n      return;\n    }\n    \n    const layout = {\n      name: layoutName,\n      positions: { ...this.currentLayout.positions }\n    };\n    \n    if (this.onLayoutSaved) {\n      this.onLayoutSaved(layout);\n    }\n    \n    alert(`Layout \"${layoutName}\" saved successfully!`);\n  }\n\n  /**\n   * Reset layout to default circular arrangement\n   */\n  resetLayout() {\n    if (confirm('Reset all tongue positions to default circular layout?')) {\n      this.currentLayout = this.generateDefaultLayout();\n      this.createDraggableTongues();\n    }\n  }\n\n  /**\n   * Close the layout builder\n   */\n  close() {\n    if (this.onClose) {\n      this.onClose();\n    }\n  }\n\n  /**\n   * Show/hide the builder\n   */\n  setVisible(visible) {\n    this.container.style.display = visible ? 'block' : 'none';\n    if (visible) {\n      // Reset layout name input\n      this.nameInput.value = this.currentLayout.name || '';\n    }\n  }\n\n  /**\n   * Load an existing layout for editing\n   */\n  loadLayout(layout) {\n    this.currentLayout = {\n      name: layout.name,\n      positions: { ...layout.positions }\n    };\n    \n    this.nameInput.value = layout.name;\n    this.createDraggableTongues();\n  }\n\n  /**\n   * Get current layout\n   */\n  getCurrentLayout() {\n    return {\n      name: this.currentLayout.name,\n      positions: { ...this.currentLayout.positions }\n    };\n  }\n\n  /**\n   * Auto-arrange tongues in specific patterns\n   */\n  autoArrangePattern(pattern) {\n    const canvasRect = this.canvas.getBoundingClientRect();\n    const centerX = canvasRect.width / 2 || 300;\n    const centerY = canvasRect.height / 2 || 300;\n    const positions = {};\n\n    switch (pattern) {\n      case 'circle':\n        const radius = Math.min(centerX, centerY) - 60;\n        for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n          const angle = (2 * Math.PI * (i - 1)) / this.drumConfig.noteCount - Math.PI / 2;\n          positions[i] = {\n            x: centerX + Math.cos(angle) * radius,\n            y: centerY + Math.sin(angle) * radius\n          };\n        }\n        break;\n\n      case 'grid':\n        const cols = Math.ceil(Math.sqrt(this.drumConfig.noteCount));\n        const spacing = Math.min(canvasRect.width, canvasRect.height) / (cols + 1);\n        for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n          const row = Math.floor((i - 1) / cols);\n          const col = (i - 1) % cols;\n          positions[i] = {\n            x: spacing * (col + 1),\n            y: spacing * (row + 1)\n          };\n        }\n        break;\n\n      case 'spiral':\n        let angle = 0;\n        let radiusSpiral = 20;\n        const spiralGrowth = 15;\n        for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n          positions[i] = {\n            x: centerX + Math.cos(angle) * radiusSpiral,\n            y: centerY + Math.sin(angle) * radiusSpiral\n          };\n          angle += 0.8;\n          radiusSpiral += spiralGrowth;\n        }\n        break;\n\n      case 'line':\n        const spacing_line = (canvasRect.width - 80) / (this.drumConfig.noteCount - 1);\n        for (let i = 1; i <= this.drumConfig.noteCount; i++) {\n          positions[i] = {\n            x: 40 + (i - 1) * spacing_line,\n            y: centerY\n          };\n        }\n        break;\n\n      default:\n        console.warn(`Unknown pattern: ${pattern}`);\n        return;\n    }\n\n    this.currentLayout.positions = positions;\n    this.createDraggableTongues();\n  }\n\n  /**\n   * Export layout as JSON\n   */\n  exportLayout() {\n    const layoutData = {\n      ...this.getCurrentLayout(),\n      drumConfig: this.drumConfig,\n      timestamp: new Date().toISOString()\n    };\n\n    const blob = new Blob([JSON.stringify(layoutData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `tongue-drum-layout-${layoutData.name.replace(/\\s+/g, '-')}.json`;\n    a.click();\n    \n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Import layout from JSON\n   */\n  importLayout(data) {\n    try {\n      let layoutData;\n      \n      if (typeof data === 'string') {\n        layoutData = JSON.parse(data);\n      } else {\n        layoutData = data;\n      }\n      \n      // Validate layout structure\n      if (!layoutData.name || !layoutData.positions) {\n        throw new Error('Invalid layout format');\n      }\n      \n      // Load the layout\n      this.loadLayout(layoutData);\n      return true;\n      \n    } catch (error) {\n      console.error('Failed to import layout:', error);\n      alert(`Failed to import layout: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get layout statistics\n   */\n  getLayoutStats() {\n    const positions = Object.values(this.currentLayout.positions);\n    if (positions.length === 0) return null;\n    \n    const xs = positions.map(p => p.x);\n    const ys = positions.map(p => p.y);\n    \n    return {\n      tongueCount: positions.length,\n      bounds: {\n        minX: Math.min(...xs),\n        maxX: Math.max(...xs),\n        minY: Math.min(...ys),\n        maxY: Math.max(...ys)\n      },\n      center: {\n        x: xs.reduce((a, b) => a + b, 0) / xs.length,\n        y: ys.reduce((a, b) => a + b, 0) / ys.length\n      }\n    };\n  }\n}\n","import { AudioManager } from './audio/audioManager.js';\nimport { DrumVisualizer } from './components/DrumVisualizer.js';\nimport { NotationBuilder } from './components/NotationBuilder.js';\nimport { LayoutBuilder } from './components/LayoutBuilder.js';\n\n/**\n * Main application class for the Tongue Drum Chum app\n * Now powered by EssentiaJS for professional-grade audio analysis\n */\nclass TongueDrumApp {\n  constructor() {\n    this.audioManager = null;\n    this.drumVisualizer = null;\n    this.notationBuilder = null;\n    this.layoutBuilder = null;\n\n    // Application state\n    this.isListening = false;\n    this.currentConfig = {\n      noteCount: 15,\n      key: 'D',\n      scaleType: 'major',\n      rootOctave: 4\n    };\n    this.detectionHistory = [];\n\n    this.initializeElements();\n    this.setupEventListeners();\n    this.initializeComponents();\n    this.updateUI();\n  }\n\n  /**\n   * Initialize DOM elements\n   */\n  initializeElements() {\n    // Setup panel and navigation - map to actual HTML IDs\n    this.setupPanel = document.querySelector('.setup-panel');\n    this.tabButtons = document.querySelectorAll('.tab');\n    this.tabPanels = document.querySelectorAll('.tab-content');\n\n    // Control buttons - map to actual HTML IDs\n    this.startButton = document.getElementById('startButton');\n    this.stopButton = null; // We'll create this dynamically or handle differently\n    this.testMicButton = document.getElementById('testMicrophone');\n\n    // Create sensitivity controls if they don't exist\n    this.sensitivitySlider = this.createSensitivityControls();\n    this.sensitivityValue = document.getElementById('sensitivityValue');\n\n    // Status displays - map to actual HTML IDs\n    this.detectionResults = document.getElementById('detectionResults');\n    this.audioInfo = document.querySelector('.audio-metrics');\n    this.statusMessage = document.getElementById('status');\n    this.progressBar = document.getElementById('progressFill');\n\n    // Configuration controls - map to actual HTML IDs\n    this.drumSizeSelect = document.getElementById('noteCount');\n    this.keySelect = document.getElementById('drumKey');\n    this.scaleSelect = document.getElementById('scaleType');\n    this.octaveSelect = document.getElementById('rootOctave');\n    this.presetSelect = this.createPresetSelect();\n    this.loadPresetButton = document.getElementById('applyManualConfig');\n\n    // Builder toggles - map to actual HTML IDs\n    this.notationToggle = document.getElementById('toggleBuilder');\n    this.layoutToggle = document.getElementById('loadPhoto'); // We'll repurpose this\n\n    // Auto-detection button\n    this.autoDetectButton = document.getElementById('startDetection');\n\n    // Validate required elements with more lenient approach\n    const requiredElements = [\n      this.setupPanel, this.startButton, this.testMicButton,\n      this.audioInfo, this.statusMessage, this.drumSizeSelect, \n      this.keySelect, this.scaleSelect\n    ];\n\n    const missingElements = requiredElements.filter(el => !el);\n    if (missingElements.length > 0) {\n      console.warn('Some optional DOM elements not found, but continuing...');\n    }\n  }\n\n  /**\n   * Create sensitivity controls if they don't exist\n   */\n  createSensitivityControls() {\n    // Check if sensitivity control already exists\n    let sensitivitySlider = document.getElementById('sensitivitySlider');\n    if (sensitivitySlider) return sensitivitySlider;\n\n    // Create sensitivity controls and add to control panel\n    const controlsDiv = document.querySelector('.controls');\n    if (controlsDiv) {\n      const sensitivityGroup = document.createElement('div');\n      sensitivityGroup.className = 'config-group';\n      sensitivityGroup.innerHTML = `\n        <label for=\"sensitivitySlider\">Detection Sensitivity</label>\n        <div class=\"slider-container\">\n          <input type=\"range\" id=\"sensitivitySlider\" min=\"0.1\" max=\"1.0\" step=\"0.1\" value=\"0.7\">\n          <span id=\"sensitivityValue\">0.7</span>\n        </div>\n        <small>Higher = more sensitive</small>\n      `;\n      controlsDiv.appendChild(sensitivityGroup);\n      return document.getElementById('sensitivitySlider');\n    }\n    return null;\n  }\n\n  /**\n   * Create preset selector if it doesn't exist\n   */\n  createPresetSelect() {\n    // Check if preset select already exists\n    let presetSelect = document.getElementById('presetSelect');\n    if (presetSelect) return presetSelect;\n\n    // Create preset selector in manual config tab\n    const manualTab = document.getElementById('manual-tab');\n    if (manualTab) {\n      const presetGroup = document.createElement('div');\n      presetGroup.className = 'config-group';\n      presetGroup.innerHTML = `\n        <label for=\"presetSelect\">Quick Presets</label>\n        <select id=\"presetSelect\">\n          <option value=\"\">-- Select a preset --</option>\n          <option value=\"D Major 15-note\">D Major 15-note</option>\n          <option value=\"G Minor 13-note\">G Minor 13-note</option>\n          <option value=\"C Pentatonic 11-note\">C Pentatonic 11-note</option>\n        </select>\n      `;\n      manualTab.appendChild(presetGroup);\n      return document.getElementById('presetSelect');\n    }\n    return null;\n  }\n\n  /**\n   * Set up event listeners\n   */\n  setupEventListeners() {\n    // Tab navigation - updated to work with actual HTML\n    this.tabButtons.forEach(button => {\n      button.addEventListener('click', (e) => {\n        const target = e.target;\n        const tabId = target.dataset.tab;\n        if (tabId) {\n          this.switchTab(tabId);\n        }\n      });\n    });\n\n    // Audio controls - handle both detection methods\n    if (this.startButton) {\n      this.startButton.addEventListener('click', () => this.startListening());\n    }\n    if (this.autoDetectButton) {\n      this.autoDetectButton.addEventListener('click', () => this.startListening());\n    }\n    if (this.testMicButton) {\n      this.testMicButton.addEventListener('click', () => this.testMicrophone());\n    }\n\n    // Sensitivity control - only if it exists\n    if (this.sensitivitySlider) {\n      this.sensitivitySlider.addEventListener('input', () => this.updateSensitivity());\n    }\n\n    // Configuration controls\n    if (this.drumSizeSelect) {\n      this.drumSizeSelect.addEventListener('change', () => this.updateConfiguration());\n    }\n    if (this.keySelect) {\n      this.keySelect.addEventListener('change', () => this.updateConfiguration());\n    }\n    if (this.scaleSelect) {\n      this.scaleSelect.addEventListener('change', () => this.updateConfiguration());\n    }\n    if (this.octaveSelect) {\n      this.octaveSelect.addEventListener('change', () => this.updateConfiguration());\n    }\n    if (this.loadPresetButton) {\n      this.loadPresetButton.addEventListener('click', () => this.updateConfiguration());\n    }\n    if (this.presetSelect) {\n      this.presetSelect.addEventListener('change', () => this.loadPreset());\n    }\n\n    // Builder toggles - updated for actual HTML\n    if (this.notationToggle) {\n      this.notationToggle.addEventListener('click', () => this.toggleNotationBuilder());\n    }\n\n    // Window resize handler\n    window.addEventListener('resize', () => {\n      if (this.drumVisualizer) {\n        this.drumVisualizer.resize();\n      }\n    });\n  }\n\n  /**\n   * Initialize main components\n   */\n  initializeComponents() {\n    try {\n      // Initialize drum visualizer - use the existing drum container\n      const drumContainer = document.querySelector('.drum-container');\n      if (drumContainer) {\n        this.drumVisualizer = new DrumVisualizer(drumContainer);\n        this.drumVisualizer.onTongueClicked((tongue) => this.handleTongueClick(tongue));\n      } else {\n        console.warn('Drum container not found, drum visualizer not initialized');\n      }\n\n      // Initialize notation builder - use the existing notation builder\n      const notationContainer = document.getElementById('notationBuilder');\n      if (notationContainer) {\n        this.notationBuilder = new NotationBuilder(notationContainer, this.currentConfig);\n        this.notationBuilder.onSequenceChanged((sequence) => this.handleSequenceChange(sequence));\n        this.notationBuilder.onSequenceExported((sequence) => this.exportSequence(sequence));\n        this.notationBuilder.onBuilderClosed(() => this.toggleNotationBuilder());\n        this.notationBuilder.onTonguePlayback((tongue) => this.playTongue(tongue));\n        this.notationBuilder.setVisible(false);\n      } else {\n        console.warn('Notation builder container not found');\n      }\n\n      // Initialize layout builder - create container if needed or skip for now\n      const layoutContainer = document.getElementById('layoutBuilder');\n      if (layoutContainer) {\n        this.layoutBuilder = new LayoutBuilder(layoutContainer, this.currentConfig);\n        this.layoutBuilder.onLayoutSave((layout) => this.saveCustomLayout(layout));\n        this.layoutBuilder.onBuilderClosed(() => this.toggleLayoutBuilder());\n        this.layoutBuilder.setVisible(false);\n      } else {\n        console.warn('Layout builder container not found - using layout tab instead');\n        // Use the existing layout tab functionality\n        this.setupLayoutTabFunctionality();\n      }\n\n      console.log('🎵 Components initialized successfully!');\n\n    } catch (error) {\n      console.error('Failed to initialize components:', error);\n      this.showStatus('Application partially loaded - some features may be limited', 'warning');\n    }\n  }\n\n  /**\n   * Set up layout tab functionality as fallback\n   */\n  setupLayoutTabFunctionality() {\n    const layoutCanvas = document.getElementById('layoutCanvas');\n    if (layoutCanvas && this.drumVisualizer) {\n      // Add basic drag functionality to the existing layout tab\n      console.log('Setting up basic layout functionality in layout tab');\n    }\n  }\n\n  /**\n   * Switch between tabs\n   */\n  switchTab(tabId) {\n    // Update tab buttons\n    this.tabButtons.forEach(button => {\n      button.classList.toggle('active', button.dataset.tab === tabId);\n    });\n\n    // Update tab panels\n    this.tabPanels.forEach(panel => {\n      panel.classList.toggle('active', panel.id === `${tabId}Tab`);\n    });\n  }\n\n  /**\n   * Start audio listening with EssentiaJS\n   */\n  async startListening() {\n    if (this.isListening || this.audioManager) return;\n\n    try {\n      this.showStatus('Initializing EssentiaJS audio analysis engine...', 'info');\n      this.setProgress(10);\n\n      // Initialize enhanced audio manager with EssentiaJS\n      this.audioManager = new AudioManager({\n        fftSize: 4096,\n        sensitivity: parseFloat(this.sensitivitySlider.value) || 0.7,\n        cooldownTime: 150\n      });\n      \n      this.setProgress(30);\n      \n      // Set up note detection callback\n      this.audioManager.onNoteDetected((detection) => this.handleNoteDetection(detection));\n      this.audioManager.onError((error) => this.showStatus(error, 'error'));\n      \n      this.setProgress(50);\n      \n      // Update with current tongue frequencies\n      if (this.drumVisualizer) {\n        const frequencies = this.drumVisualizer.getTongueFrequencies();\n        this.audioManager.updateTongueFrequencies(frequencies);\n      }\n      \n      this.setProgress(70);\n      \n      // Start listening\n      await this.audioManager.startListening();\n      \n      this.setProgress(100);\n      \n      this.isListening = true;\n      this.updateUI();\n      this.showStatus('EssentiaJS audio analysis active - listening for tongue drum notes...', 'success');\n      \n      // Update audio info\n      this.updateAudioInfo();\n      \n      setTimeout(() => this.setProgress(0), 1000);\n\n    } catch (error) {\n      console.error('Failed to start listening:', error);\n      this.showStatus(`Failed to start listening: ${error.message}`, 'error');\n      this.setProgress(0);\n      this.audioManager = null;\n    }\n  }\n\n  /**\n   * Stop audio listening\n   */\n  stopListening() {\n    if (!this.isListening || !this.audioManager) return;\n\n    this.audioManager.stopListening();\n    this.audioManager = null;\n    this.isListening = false;\n    this.updateUI();\n    this.showStatus('Audio analysis stopped', 'info');\n    this.clearDetectionResults();\n  }\n\n  /**\n   * Test microphone access\n   */\n  async testMicrophone() {\n    try {\n      this.showStatus('Testing microphone access...', 'info');\n      \n      const tempAudioManager = new AudioManager();\n      const isWorking = await tempAudioManager.testMicrophone();\n      \n      if (isWorking) {\n        this.showStatus('Microphone test successful! EssentiaJS ready.', 'success');\n      } else {\n        this.showStatus('Microphone test failed', 'error');\n      }\n      \n      tempAudioManager.stopListening();\n    } catch (error) {\n      console.error('Microphone test failed:', error);\n      this.showStatus(`Microphone test failed: ${error.message}`, 'error');\n    }\n  }\n\n  /**\n   * Update sensitivity setting\n   */\n  updateSensitivity() {\n    const sensitivity = parseFloat(this.sensitivitySlider.value);\n    this.sensitivityValue.textContent = sensitivity.toFixed(1);\n    \n    if (this.audioManager) {\n      this.audioManager.setSensitivity(sensitivity);\n    }\n  }\n\n  /**\n   * Update drum configuration\n   */\n  updateConfiguration() {\n    const newConfig = {\n      noteCount: parseInt(this.drumSizeSelect.value),\n      key: this.keySelect.value,\n      scaleType: this.scaleSelect.value,\n      rootOctave: parseInt(this.octaveSelect.value)\n    };\n\n    this.currentConfig = newConfig;\n\n    // Update components\n    if (this.drumVisualizer) {\n      this.drumVisualizer.updateConfiguration(newConfig);\n    }\n    if (this.notationBuilder) {\n      this.notationBuilder.updateConfiguration(newConfig);\n    }\n    if (this.layoutBuilder) {\n      this.layoutBuilder.updateConfiguration(newConfig);\n    }\n\n    // Update audio manager with new frequencies\n    if (this.audioManager && this.drumVisualizer) {\n      const frequencies = this.drumVisualizer.getTongueFrequencies();\n      this.audioManager.updateTongueFrequencies(frequencies);\n    }\n\n    this.updateAudioInfo();\n  }\n\n  /**\n   * Load preset configuration\n   */\n  loadPreset() {\n    const presetName = this.presetSelect.value;\n    if (!presetName) return;\n\n    if (this.drumVisualizer) {\n      const success = this.drumVisualizer.loadPreset(presetName);\n      if (success) {\n        this.showStatus(`Loaded preset: ${presetName}`, 'success');\n        this.updateAudioInfo();\n      } else {\n        this.showStatus(`Failed to load preset: ${presetName}`, 'error');\n      }\n    }\n  }\n\n  /**\n   * Handle note detection from EssentiaJS audio manager\n   */\n  handleNoteDetection(detection) {\n    // Add to history\n    this.detectionHistory.unshift(detection);\n    if (this.detectionHistory.length > 10) {\n      this.detectionHistory = this.detectionHistory.slice(0, 10);\n    }\n\n    // Enhanced visual feedback with confidence\n    if (this.drumVisualizer) {\n      this.drumVisualizer.showDetectionFeedback(detection);\n    }\n\n    // Update detection results display\n    this.updateDetectionResults();\n\n    // Log detection for debugging\n    console.log(`EssentiaJS detected: Tongue ${detection.tongue}, ${detection.frequency.toFixed(1)}Hz, confidence: ${(detection.confidence * 100).toFixed(1)}%`);\n  }\n\n  /**\n   * Handle tongue click from visualizer\n   */\n  handleTongueClick(tongue) {\n    this.playTongue(tongue);\n    \n    // Simulate detection for feedback\n    if (this.drumVisualizer) {\n      this.drumVisualizer.simulateNoteDetection(tongue);\n    }\n  }\n\n  /**\n   * Play a tongue with audio synthesis\n   */\n  playTongue(tongue) {\n    // Enhanced audio synthesis using Web Audio API\n    if (this.drumVisualizer) {\n      const frequency = this.drumVisualizer.getTongueFrequencies()[tongue];\n      if (frequency) {\n        this.synthesizeTongueNote(frequency, 0.5); // 500ms duration\n      }\n      \n      this.drumVisualizer.highlightTongue(tongue, 300);\n    }\n  }\n\n  /**\n   * Synthesize a tongue drum note using Web Audio API\n   */\n  synthesizeTongueNote(frequency, duration) {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      console.warn('Web Audio API not supported');\n      return;\n    }\n\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // Create oscillator for the fundamental frequency\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      // Use a combination of sine waves to simulate tongue drum timbre\n      oscillator.type = 'sine';\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      \n      // Create envelope (attack-decay-sustain-release)\n      const now = audioContext.currentTime;\n      gainNode.gain.setValueAtTime(0, now);\n      gainNode.gain.linearRampToValueAtTime(0.3, now + 0.01); // Attack\n      gainNode.gain.exponentialRampToValueAtTime(0.1, now + 0.1); // Decay\n      gainNode.gain.exponentialRampToValueAtTime(0.05, now + duration * 0.7); // Sustain\n      gainNode.gain.exponentialRampToValueAtTime(0.001, now + duration); // Release\n      \n      // Connect audio graph\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      // Start and stop\n      oscillator.start(now);\n      oscillator.stop(now + duration);\n      \n    } catch (error) {\n      console.warn('Failed to synthesize note:', error);\n    }\n  }\n\n  /**\n   * Handle sequence changes from notation builder\n   */\n  handleSequenceChange(sequence) {\n    console.log('Sequence updated:', sequence);\n  }\n\n  /**\n   * Export sequence data with enhanced metadata\n   */\n  exportSequence(sequence) {\n    const notation = this.notationBuilder?.sequenceToNotation() || [];\n    const data = {\n      drumConfig: this.currentConfig,\n      sequence: sequence,\n      notation: notation,\n      tongueFrequencies: this.drumVisualizer?.getTongueFrequencies() || {},\n      timestamp: new Date().toISOString(),\n      version: '2.0-EssentiaJS'\n    };\n\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `tongue-drum-sequence-${Date.now()}.json`;\n    a.click();\n    \n    URL.revokeObjectURL(url);\n    this.showStatus('Sequence exported successfully!', 'success');\n  }\n\n  /**\n   * Save custom layout\n   */\n  saveCustomLayout(layout) {\n    // Save to drum visualizer's config manager\n    if (this.drumVisualizer && this.drumVisualizer.configManager) {\n      this.drumVisualizer.configManager.saveCustomLayout(layout);\n    }\n    \n    // Add to preset selector if not already there\n    let optionExists = false;\n    for (const option of this.presetSelect.options) {\n      if (option.value === layout.name) {\n        optionExists = true;\n        break;\n      }\n    }\n    \n    if (!optionExists) {\n      const option = document.createElement('option');\n      option.value = layout.name;\n      option.textContent = layout.name;\n      this.presetSelect.appendChild(option);\n    }\n    \n    this.showStatus(`Layout \"${layout.name}\" saved!`, 'success');\n  }\n\n  /**\n   * Toggle notation builder visibility\n   */\n  toggleNotationBuilder() {\n    if (!this.notationBuilder) return;\n    \n    const container = document.getElementById('notationBuilder');\n    const isVisible = container.style.display !== 'none';\n    \n    this.notationBuilder.setVisible(!isVisible);\n    this.notationToggle.textContent = isVisible ? '🎵 Show Notation Builder' : '🎵 Hide Notation Builder';\n  }\n\n  /**\n   * Toggle layout builder visibility\n   */\n  toggleLayoutBuilder() {\n    if (!this.layoutBuilder) return;\n    \n    const container = document.getElementById('layoutBuilder');\n    const isVisible = container.style.display !== 'none';\n    \n    this.layoutBuilder.setVisible(!isVisible);\n    this.layoutToggle.textContent = isVisible ? '🎯 Show Layout Builder' : '🎯 Hide Layout Builder';\n  }\n\n  /**\n   * Update UI state\n   */\n  updateUI() {\n    // Update button states - handle missing elements\n    if (this.startButton) {\n      this.startButton.style.display = this.isListening ? 'none' : 'inline-block';\n      this.startButton.textContent = this.isListening ? 'Stop Detection' : 'Start Detection';\n    }\n    \n    if (this.autoDetectButton) {\n      this.autoDetectButton.textContent = this.isListening ? 'Stop Detection' : 'Start Detection';\n    }\n    \n    // Handle stop button if it exists (but it doesn't in our HTML)\n    if (this.stopButton) {\n      this.stopButton.style.display = this.isListening ? 'inline-block' : 'none';\n    }\n    \n    // Update configuration controls - with null checks\n    if (this.drumSizeSelect) this.drumSizeSelect.disabled = this.isListening;\n    if (this.keySelect) this.keySelect.disabled = this.isListening;\n    if (this.scaleSelect) this.scaleSelect.disabled = this.isListening;\n    if (this.octaveSelect) this.octaveSelect.disabled = this.isListening;\n  }\n\n  /**\n   * Update audio information display\n   */\n  updateAudioInfo() {\n    if (this.drumVisualizer) {\n      const drumInfo = this.drumVisualizer.getDrumInfo();\n      const contextState = this.audioManager ? this.audioManager.getAudioContextState() : 'closed';\n      const sampleRate = this.audioManager ? this.audioManager.getSampleRate() : 'N/A';\n      \n      this.audioInfo.innerHTML = `\n        <div class=\"audio-stat\">\n          <span class=\"stat-label\">Configuration:</span>\n          <span class=\"stat-value\">${drumInfo}</span>\n        </div>\n        <div class=\"audio-stat\">\n          <span class=\"stat-label\">Status:</span>\n          <span class=\"stat-value\">${this.isListening ? 'EssentiaJS Active' : 'Stopped'}</span>\n        </div>\n        <div class=\"audio-stat\">\n          <span class=\"stat-label\">Sample Rate:</span>\n          <span class=\"stat-value\">${sampleRate} Hz</span>\n        </div>\n        <div class=\"audio-stat\">\n          <span class=\"stat-label\">Audio Context:</span>\n          <span class=\"stat-value\">${contextState}</span>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Update detection results display with enhanced information\n   */\n  updateDetectionResults() {\n    if (this.detectionHistory.length === 0) {\n      this.detectionResults.innerHTML = '<div class=\"no-results\">No notes detected yet... (EssentiaJS ready)</div>';\n      return;\n    }\n\n    const resultsHTML = this.detectionHistory.map(detection => `\n      <div class=\"detection-result\">\n        <span class=\"tongue-number\">Tongue ${detection.tongue}</span>\n        <span class=\"confidence ${detection.confidence > 0.8 ? 'high-confidence' : detection.confidence > 0.5 ? 'medium-confidence' : 'low-confidence'}\">\n          ${(detection.confidence * 100).toFixed(1)}%\n        </span>\n        <span class=\"frequency\">${detection.frequency.toFixed(1)} Hz</span>\n        ${detection.targetFrequency ? `<span class=\"target-freq\">(target: ${detection.targetFrequency.toFixed(1)}Hz)</span>` : ''}\n      </div>\n    `).join('');\n\n    this.detectionResults.innerHTML = resultsHTML;\n  }\n\n  /**\n   * Clear detection results\n   */\n  clearDetectionResults() {\n    this.detectionHistory = [];\n    this.updateDetectionResults();\n  }\n\n  /**\n   * Show status message\n   */\n  showStatus(message, type = 'info') {\n    this.statusMessage.textContent = message;\n    this.statusMessage.className = `status-message ${type}`;\n    \n    // Auto-hide after 5 seconds for non-error messages\n    if (type !== 'error') {\n      setTimeout(() => {\n        this.statusMessage.textContent = '';\n        this.statusMessage.className = 'status-message';\n      }, 5000);\n    }\n  }\n\n  /**\n   * Set progress bar value\n   */\n  setProgress(percent) {\n    this.progressBar.style.width = `${percent}%`;\n    this.progressBar.style.display = percent > 0 ? 'block' : 'none';\n  }\n}\n\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  try {\n    new TongueDrumApp();\n    console.log('🎵 Tongue Drum Chum app initialized successfully with EssentiaJS! 🎵');\n  } catch (error) {\n    console.error('Failed to initialize Tongue Drum Chum app:', error);\n    \n    // Show error message to user\n    const statusElement = document.getElementById('statusMessage');\n    if (statusElement) {\n      statusElement.textContent = `Failed to initialize app: ${error.message}`;\n      statusElement.className = 'status-message error';\n    }\n  }\n});\n"],"names":["AudioManager","options","callback","frequencies","sensitivity","event","error","inputData","framesToCopy","i","windowedSignal","spectrum","pitchYin","bufferLength","dataArray","maxIndex","maxValue","frequency","pitchMelodia","spectralPeaks","pitches","dominantFreq","a","b","midIndex","currentTime","detection","bestMatch","smallestDifference","tongueStr","tongueFreq","tongue","difference","percentDifference","tolerance","fundamental","secondHarmonic","thirdHarmonic","peakFreq","secondDiff","thirdDiff","track","testStream","SCALE_PATTERNS","NOTE_TO_SEMITONE","DRUM_PRESETS","DrumConfigManager","config","newConfig","tongueNumber","baseFrequency","pattern","scaleIndex","octaveOffset","semitoneOffset","note","octave","semitonesFromA4","positions","angle","x","y","presetName","preset","layout","name","presets","scaleDisplayName","rootSemitone","noteSemitone","noteOctave","semitoneFromA4","closestFrequency","centsOff","noteIndex","noteName","sequence","prevTongue","currTongue","prevFreq","currFreq","customData","layouts","data","DrumVisualizer","container","duration","t","drumRect","drumWidth","drumHeight","canvasWidth","canvasHeight","scaleX","scaleY","index","totalCount","radius","customLayout","confidenceBar","analysis","display","state","NotationBuilder","drumConfig","tongueDiv","e","target","btn","_a","activeBtn","noteDiv","octaveMarker","sequenceNotes","n","resolve","visible","notation","length","octaves","tongueUsage","octaveUsage","totalTongues","LayoutBuilder","canvasRect","centerX","centerY","centerDiv","pos","touch","element","clientX","clientY","elementRect","tongueWidth","tongueHeight","layoutName","cols","spacing","row","col","radiusSpiral","spiralGrowth","spacing_line","layoutData","blob","url","xs","p","ys","TongueDrumApp","el","sensitivitySlider","controlsDiv","sensitivityGroup","presetSelect","manualTab","presetGroup","button","tabId","drumContainer","notationContainer","layoutContainer","panel","tempAudioManager","audioContext","oscillator","gainNode","now","_b","optionExists","option","isVisible","drumInfo","contextState","sampleRate","resultsHTML","message","type","percent","statusElement"],"mappings":"ssBAOO,MAAMA,CAAa,CACxB,YAAYC,EAAU,GAAI,CACxB,KAAK,aAAe,KACpB,KAAK,SAAW,KAChB,KAAK,WAAa,KAClB,KAAK,OAAS,KACd,KAAK,SAAW,KAChB,KAAK,YAAc,GACnB,KAAK,eAAiB,KAGtB,KAAK,QAAUA,EAAQ,SAAW,KAClC,KAAK,WAAa,MAClB,KAAK,YAAcA,EAAQ,aAAe,GAC1C,KAAK,aAAeA,EAAQ,cAAgB,IAC5C,KAAK,kBAAoB,EAGzB,KAAK,uBAAyB,KAC9B,KAAK,gBAAkB,KAGvB,KAAK,kBAAoB,CAAA,EAGzB,KAAK,YAAc,IAAI,aAAa,KAAK,OAAO,EAChD,KAAK,YAAc,EACnB,KAAK,aAAe,GAEpB,KAAK,mBAAkB,CACzB,CAKA,MAAM,oBAAqB,CAEzB,eAAQ,IAAI,iFAAiF,EAC7F,KAAK,SAAW,KACT,QAAQ,QAAO,CACxB,CAKA,eAAeC,EAAU,CACvB,KAAK,uBAAyBA,CAChC,CAKA,QAAQA,EAAU,CAChB,KAAK,gBAAkBA,CACzB,CAKA,wBAAwBC,EAAa,CACnC,KAAK,kBAAoB,CAAE,GAAGA,CAAW,CAC3C,CAKA,eAAeC,EAAa,CAC1B,KAAK,YAAc,KAAK,IAAI,EAAK,KAAK,IAAI,EAAKA,CAAW,CAAC,CAC7D,CAKA,MAAM,gBAAiB,CACrB,GAAI,MAAK,YAET,GAAI,CAEF,KAAK,OAAS,MAAM,UAAU,aAAa,aAAa,CACtD,MAAO,CACL,iBAAkB,GAClB,iBAAkB,GAClB,gBAAiB,GACjB,WAAY,KAAK,WACjB,aAAc,CACxB,CACA,CAAO,EAGD,KAAK,aAAe,IAAK,OAAO,cAAgB,OAAO,oBAAoB,CACzE,WAAY,KAAK,UACzB,CAAO,EAED,KAAK,WAAa,KAAK,aAAa,wBAAwB,KAAK,MAAM,EACvE,KAAK,SAAW,KAAK,aAAa,eAAc,EAGhD,KAAK,SAAS,QAAU,KAAK,QAC7B,KAAK,SAAS,sBAAwB,GACtC,KAAK,SAAS,YAAc,IAC5B,KAAK,SAAS,YAAc,IAG5B,KAAK,UAAY,KAAK,aAAa,sBAAsB,KAAM,EAAG,CAAC,EACnE,KAAK,UAAU,eAAkBC,GAAU,CACzC,KAAK,kBAAkBA,EAAM,YAAY,eAAe,CAAC,CAAC,CAC5D,EAGA,KAAK,WAAW,QAAQ,KAAK,QAAQ,EACrC,KAAK,WAAW,QAAQ,KAAK,SAAS,EACtC,KAAK,UAAU,QAAQ,KAAK,aAAa,WAAW,EAEpD,KAAK,YAAc,GACnB,QAAQ,IAAI,yBAAyB,CAEvC,OAASC,EAAO,CACd,cAAQ,MAAM,mCAAoCA,CAAK,EACnD,KAAK,iBACP,KAAK,gBAAgB,6BAA6BA,EAAM,OAAO,EAAE,EAE7DA,CACR,CACF,CAKA,kBAAkBC,EAAW,CAC3B,GAAI,CAAC,KAAK,UAAY,CAAC,KAAK,YAAa,OAGzC,MAAMC,EAAe,KAAK,IAAID,EAAU,OAAQ,KAAK,YAAY,OAAS,KAAK,WAAW,EAC1F,QAASE,EAAI,EAAGA,EAAID,EAAcC,IAChC,KAAK,YAAY,KAAK,YAAcA,CAAC,EAAIF,EAAUE,CAAC,EAGtD,KAAK,aAAeD,EAGhB,KAAK,aAAe,KAAK,YAAY,SACvC,KAAK,aAAe,GACpB,KAAK,YAAc,EACnB,KAAK,mBAAkB,EAE3B,CAKA,oBAAqB,CACnB,GAAK,KAAK,aAEV,GAAI,CACE,KAAK,SAEP,KAAK,oBAAmB,EAGxB,KAAK,oBAAmB,CAE5B,OAASF,EAAO,CACd,QAAQ,KAAK,wBAAyBA,CAAK,EAE3C,KAAK,oBAAmB,CAC1B,CACF,CAKA,qBAAsB,CACpB,GAAI,CAEF,MAAMI,EAAiB,KAAK,SAAS,UAAU,KAAK,YAAa,OAAQ,GAAM,EAAI,EAG7EC,EAAW,KAAK,SAAS,SAASD,CAAc,EAIhDE,EADiB,KAAK,SAAS,SAAS,KAAK,YAAa,EAAG,EACnC,MAE5BA,GAAYA,EAAW,IAAMA,EAAW,KAC1C,KAAK,sBAAsBA,EAAUD,CAAQ,CAEjD,OAASL,EAAO,CACd,QAAQ,KAAK,8DAA+DA,CAAK,EACjF,KAAK,oBAAmB,CAC1B,CACF,CAKA,qBAAsB,CAEpB,MAAMO,EAAe,KAAK,SAAS,kBAC7BC,EAAY,IAAI,WAAWD,CAAY,EAC7C,KAAK,SAAS,qBAAqBC,CAAS,EAG5C,IAAIC,EAAW,EACXC,EAAW,EAEf,QAASP,EAAI,EAAGA,EAAII,EAAcJ,IAC5BK,EAAUL,CAAC,EAAIO,IACjBA,EAAWF,EAAUL,CAAC,EACtBM,EAAWN,GAKf,MAAMQ,EAAaF,EAAW,KAAK,aAAa,YAAe,KAAK,SAAS,QAAU,GAGnFC,EAAW,IAAMC,EAAY,IAAMA,EAAY,KACjD,KAAK,sBAAsBA,EAAW,CAAE,WAAYD,EAAW,IAAK,CAExE,CAKA,sBAAsBJ,EAAUM,EAAcC,EAAe,CAC3D,MAAMC,EAAU,CAAA,EAShB,GANIR,EAAW,GAAGQ,EAAQ,KAAKR,CAAQ,EAGnCM,EAAe,GAAGE,EAAQ,KAAKF,CAAY,EAG3CC,EAAc,UAAU,OAAS,EAAG,CACtC,MAAME,EAAeF,EAAc,UAAU,CAAC,EAC1CE,EAAe,IAAMA,EAAe,KACtCD,EAAQ,KAAKC,CAAY,CAE7B,CAEA,GAAID,EAAQ,SAAW,EAAG,OAAO,KAGjCA,EAAQ,KAAK,CAACE,EAAGC,IAAMD,EAAIC,CAAC,EAC5B,MAAMC,EAAW,KAAK,MAAMJ,EAAQ,OAAS,CAAC,EAC9C,OAAOA,EAAQ,OAAS,IAAM,GACzBA,EAAQI,EAAW,CAAC,EAAIJ,EAAQI,CAAQ,GAAK,EAC9CJ,EAAQI,CAAQ,CACtB,CAKA,sBAAsBP,EAAWE,EAAe,CAC9C,MAAMM,EAAc,KAAK,IAAG,EAG5B,GAAIA,EAAc,KAAK,kBAAoB,KAAK,aAC9C,OAIF,MAAMC,EAAY,KAAK,kBAAkBT,EAAWE,CAAa,EAE7DO,GAAaA,EAAU,YAAc,KAAK,cAC5C,KAAK,kBAAoBD,EAErB,KAAK,wBACP,KAAK,uBAAuBC,CAAS,EAG3C,CAKA,kBAAkBT,EAAWE,EAAe,CAC1C,GAAI,OAAO,KAAK,KAAK,iBAAiB,EAAE,SAAW,EACjD,OAAO,KAGT,IAAIQ,EAAY,KACZC,EAAqB,IAGzB,SAAW,CAACC,EAAWC,CAAU,IAAK,OAAO,QAAQ,KAAK,iBAAiB,EAAG,CAC5E,MAAMC,EAAS,SAASF,CAAS,EAC3BG,EAAa,KAAK,IAAIf,EAAYa,CAAU,EAC5CG,EAAoBD,EAAaF,EAGvC,IAAII,EAAY,IAGZJ,EAAa,MAAKI,EAAY,KAC9BJ,EAAa,OAAMI,EAAY,IAGR,KAAK,qBAAqBJ,EAAYX,CAAa,IAE5Ee,GAAa,KAGXD,GAAqBC,GAAaF,EAAaJ,IACjDA,EAAqBI,EACrBL,EAAY,CACV,OAAQI,EACR,UAAWd,EACX,gBAAiBa,EACjB,WAAY,KAAK,IAAI,EAAG,EAAKG,EAAoBC,CAAU,CACrE,EAEI,CAEA,OAAOP,CACT,CAKA,qBAAqBQ,EAAahB,EAAe,CAC/C,GAAI,CAACA,EAAc,WAAaA,EAAc,UAAU,OAAS,EAC/D,MAAO,GAIT,MAAMiB,EAAiBD,EAAc,EAC/BE,EAAgBF,EAAc,EAE9BD,EAAY,GAElB,UAAWI,KAAYnB,EAAc,UAAW,CAC9C,MAAMoB,EAAa,KAAK,IAAID,EAAWF,CAAc,EAAIA,EACnDI,EAAY,KAAK,IAAIF,EAAWD,CAAa,EAAIA,EAEvD,GAAIE,GAAcL,GAAaM,GAAaN,EAC1C,MAAO,EAEX,CAEA,MAAO,EACT,CAKA,eAAgB,CACT,KAAK,cAEV,KAAK,YAAc,GAEf,KAAK,YACP,KAAK,UAAU,WAAU,EACzB,KAAK,UAAY,MAGf,KAAK,aACP,KAAK,WAAW,WAAU,EAC1B,KAAK,WAAa,MAGhB,KAAK,WACP,KAAK,SAAS,WAAU,EACxB,KAAK,SAAW,MAGd,KAAK,SACP,KAAK,OAAO,UAAS,EAAG,QAAQO,GAASA,EAAM,MAAM,EACrD,KAAK,OAAS,MAGZ,KAAK,cAAgB,KAAK,aAAa,QAAU,WACnD,KAAK,aAAa,MAAK,EACvB,KAAK,aAAe,MAGtB,QAAQ,IAAI,yBAAyB,EACvC,CAKA,MAAM,gBAAiB,CACrB,GAAI,CACF,MAAMC,EAAa,MAAM,UAAU,aAAa,aAAa,CAC3D,MAAO,CACL,WAAY,KAAK,WACjB,aAAc,CACxB,CACA,CAAO,EAGD,kBAAW,IAAM,CACfA,EAAW,UAAS,EAAG,QAAQD,GAASA,EAAM,MAAM,CACtD,EAAG,GAAI,EAEA,EACT,OAASnC,EAAO,CACd,eAAQ,MAAM,0BAA2BA,CAAK,EACvC,EACT,CACF,CAKA,sBAAuB,CACrB,OAAO,KAAK,aAAe,KAAK,aAAa,MAAQ,QACvD,CAKA,eAAgB,CACd,OAAO,KAAK,aAAe,KAAK,aAAa,WAAa,KAAK,UACjE,CACF,CClaO,MAAMqC,EAAiB,CAC5B,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAC5B,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAC5B,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EAC1B,gBAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAE,EAChC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAC7B,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EACjC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAC7B,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EACvB,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,CAC9B,EAGaC,EAAmB,CAC9B,EAAK,EAAG,KAAM,EAAG,GAAM,EAAG,EAAK,EAAG,KAAM,EAAG,GAAM,EAAG,EAAK,EAAG,EAAK,EACjE,KAAM,EAAG,GAAM,EAAG,EAAK,EAAG,KAAM,EAAG,GAAM,EAAG,EAAK,EAAG,KAAM,GAAI,GAAM,GAAI,EAAK,EAC/E,EAGaC,EAAe,CAC1B,kBAAmB,CACjB,UAAW,GACX,IAAK,IACL,UAAW,QACX,WAAY,EACZ,OAAQ,IACZ,EACE,kBAAmB,CACjB,UAAW,GACX,IAAK,IACL,UAAW,QACX,WAAY,EACZ,OAAQ,IACZ,EACE,uBAAwB,CACtB,UAAW,GACX,IAAK,IACL,UAAW,aACX,WAAY,EACZ,OAAQ,IACZ,EACE,4BAA6B,CAC3B,UAAW,EACX,IAAK,IACL,UAAW,kBACX,WAAY,EACZ,OAAQ,IACZ,EACE,mBAAoB,CAClB,UAAW,EACX,IAAK,IACL,UAAW,UACX,WAAY,EACZ,OAAQ,IACZ,CACA,EAKO,MAAMC,CAAkB,CAC7B,YAAYC,EAAS,GAAI,CACvB,KAAK,OAAS,CACZ,UAAWA,EAAO,WAAa,GAC/B,IAAKA,EAAO,KAAO,IACnB,UAAWA,EAAO,WAAa,QAC/B,WAAYA,EAAO,YAAc,CACvC,EAEI,KAAK,cAAgB,IAAI,IACzB,KAAK,uBAAsB,CAC7B,CAKA,aAAaC,EAAW,CACtB,KAAK,OAAS,CAAE,GAAG,KAAK,OAAQ,GAAGA,CAAS,CAC9C,CAKA,WAAY,CACV,MAAO,CAAE,GAAG,KAAK,MAAM,CACzB,CAKA,mBAAmBC,EAAc,CAC/B,GAAIA,EAAe,GAAKA,EAAe,KAAK,OAAO,UACjD,OAAO,KAIT,MAAMC,EAAgB,KAAK,iBAAiB,KAAK,OAAO,IAAK,KAAK,OAAO,UAAU,EAG7EC,EAAUR,EAAe,KAAK,OAAO,SAAS,GAAKA,EAAe,MAGlES,GAAcH,EAAe,GAAKE,EAAQ,OAC1CE,EAAe,KAAK,OAAOJ,EAAe,GAAKE,EAAQ,MAAM,EAC7DG,EAAiBH,EAAQC,CAAU,EAAKC,EAAe,GAG7D,OAAOH,EAAgB,KAAK,IAAI,EAAGI,EAAiB,EAAE,CACxD,CAKA,sBAAuB,CACrB,MAAMnD,EAAc,CAAA,EACpB,QAASM,EAAI,EAAGA,GAAK,KAAK,OAAO,UAAWA,IAC1CN,EAAYM,CAAC,EAAI,KAAK,mBAAmBA,CAAC,EAE5C,OAAON,CACT,CAKA,iBAAiBoD,EAAMC,EAAQ,CAC7B,MAAMF,EAAiBV,EAAiBW,CAAI,GAAK,EAE3CE,GAAmBD,EAAS,GAAK,GAAKF,EAAiB,EAC7D,MAAO,KAAM,KAAK,IAAI,EAAGG,EAAkB,EAAE,CAC/C,CAKA,uBAAwB,CACtB,MAAMC,EAAY,CAAA,EAKlB,QAAS,EAAI,EAAG,GAAK,KAAK,OAAO,UAAW,IAAK,CAC/C,MAAMC,EAAS,EAAI,KAAK,IAAM,EAAI,GAAM,KAAK,OAAO,UAAY,KAAK,GAAK,EACpEC,EAAI,IAAU,KAAK,IAAID,CAAK,EAAI,IAChCE,EAAI,IAAU,KAAK,IAAIF,CAAK,EAAI,IAEtCD,EAAU,CAAC,EAAI,CAAE,EAAAE,EAAG,EAAAC,CAAC,CACvB,CAEA,MAAO,CACL,KAAM,WAAW,KAAK,OAAO,SAAS,eACtC,UAAWH,CACjB,CACE,CAKA,WAAWI,EAAY,CACrB,MAAMC,EAASlB,EAAaiB,CAAU,EACtC,OAAKC,GAKL,KAAK,aAAa,CAChB,UAAWA,EAAO,UAClB,IAAKA,EAAO,IACZ,UAAWA,EAAO,UAClB,WAAYA,EAAO,UACzB,CAAK,EAEMA,EAAO,SAXZ,QAAQ,KAAK,WAAWD,CAAU,aAAa,EACxC,KAWX,CAKA,iBAAiBE,EAAQ,CACvB,KAAK,cAAc,IAAIA,EAAO,KAAMA,CAAM,EAC1C,KAAK,qBAAoB,CAC3B,CAKA,gBAAgBC,EAAM,CACpB,OAAO,KAAK,cAAc,IAAIA,CAAI,CACpC,CAKA,eAAgB,CACd,MAAMC,EAAU,CAAE,GAAGrB,CAAY,EAGjC,SAAW,CAACoB,EAAMD,CAAM,IAAK,KAAK,cAChCE,EAAQD,CAAI,EAAI,CACd,UAAW,KAAK,OAAO,UACvB,IAAK,KAAK,OAAO,IACjB,UAAW,KAAK,OAAO,UACvB,WAAY,KAAK,OAAO,WACxB,OAAQD,CAChB,EAGI,OAAOE,CACT,CAKA,aAAc,CACZ,MAAMC,EAAmB,KAAK,OAAO,UAAU,OAAO,CAAC,EAAE,YAAW,EAC7C,KAAK,OAAO,UAAU,MAAM,CAAC,EACpD,MAAO,GAAG,KAAK,OAAO,SAAS,SAAS,KAAK,OAAO,GAAG,IAAIA,CAAgB,EAC7E,CAKA,kBAAkBlB,EAAc,CAC9B,GAAIA,EAAe,GAAKA,EAAe,KAAK,OAAO,UACjD,MAAO,UAGT,MAAME,EAAUR,EAAe,KAAK,OAAO,SAAS,GAAKA,EAAe,MAClES,GAAcH,EAAe,GAAKE,EAAQ,OAC1CE,EAAe,KAAK,OAAOJ,EAAe,GAAKE,EAAQ,MAAM,EAG7DiB,EAAexB,EAAiB,KAAK,OAAO,GAAG,GAAK,EACpDyB,GAAgBD,EAAejB,EAAQC,CAAU,GAAK,GACtDkB,EAAa,KAAK,OAAO,WAAajB,EAC1B,KAAK,OAAOe,EAAejB,EAAQC,CAAU,GAAK,EAAE,EAMtE,MAAO,GAHW,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,GAAG,EACvDiB,CAAY,CAErB,GAAGC,CAAU,EACjC,CAKA,iBAAiBrD,EAAW,CAG1B,MAAMsD,EAAiB,KAAK,MAAM,GAAK,KAAK,KAAKtD,EAAY,GAAE,CAAC,EAC1DuD,EAAmB,IAAK,KAAK,IAAI,EAAGD,EAAiB,EAAE,EACvDE,EAAW,KAAK,MAAM,KAAO,KAAK,KAAKxD,EAAYuD,CAAgB,CAAC,EAGpEE,GAAaH,EAAiB,GAAK,GACnCf,EAAS,EAAI,KAAK,OAAOe,EAAiB,GAAK,EAAE,EAEjDI,EADY,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,GAAG,EACvDD,EAAY,EAAIA,EAAY,GAAKA,CAAS,EAErE,MAAO,CACL,UAAWzD,EACX,YAAa,GAAG0D,CAAQ,GAAGnB,CAAM,GACjC,iBAAkBgB,EAClB,SAAUC,EACV,OAAQ,KAAK,IAAIA,CAAQ,GAAK,EACpC,CACE,CAKA,iBAAiBG,EAAU,CACzB,GAAI,CAACA,GAAYA,EAAS,SAAW,EACnC,MAAO,CAAE,MAAO,GAAO,OAAQ,gBAAgB,EAIjD,UAAWrB,KAAQqB,EAAU,CAC3B,MAAM3B,EAAe,OAAOM,GAAS,SAAWA,EAAK,OAASA,EAC9D,GAAIN,EAAe,GAAKA,EAAe,KAAK,OAAO,UACjD,MAAO,CAAE,MAAO,GAAO,OAAQ,0BAA0BA,CAAY,EAAE,CAE3E,CAGA,QAASxC,EAAI,EAAGA,EAAImE,EAAS,OAAQnE,IAAK,CACxC,MAAMoE,EAAa,OAAOD,EAASnE,EAAE,CAAC,GAAM,SAAWmE,EAASnE,EAAE,CAAC,EAAE,OAASmE,EAASnE,EAAE,CAAC,EACpFqE,EAAa,OAAOF,EAASnE,CAAC,GAAM,SAAWmE,EAASnE,CAAC,EAAE,OAASmE,EAASnE,CAAC,EAE9EsE,EAAW,KAAK,mBAAmBF,CAAU,EAC7CG,EAAW,KAAK,mBAAmBF,CAAU,EAGnD,GADiB,KAAK,IAAI,KAAK,KAAKE,EAAWD,CAAQ,CAAC,EACzC,EACb,MAAO,CACL,MAAO,GACP,OAAQ,sCAAsCF,CAAU,QAAQC,CAAU,EACpF,CAEI,CAEA,MAAO,CAAE,MAAO,EAAI,CACtB,CAKA,sBAAuB,CACrB,GAAI,CACF,MAAMG,EAAa,CAAA,EACnB,SAAW,CAAChB,EAAMD,CAAM,IAAK,KAAK,cAChCiB,EAAWhB,CAAI,EAAID,EAErB,aAAa,QAAQ,0BAA2B,KAAK,UAAUiB,CAAU,CAAC,CAC5E,OAAS3E,EAAO,CACd,QAAQ,KAAK,4CAA6CA,CAAK,CACjE,CACF,CAKA,wBAAyB,CACvB,GAAI,CACF,MAAM2E,EAAa,aAAa,QAAQ,yBAAyB,EACjE,GAAIA,EAAY,CACd,MAAMC,EAAU,KAAK,MAAMD,CAAU,EACrC,SAAW,CAAChB,EAAMD,CAAM,IAAK,OAAO,QAAQkB,CAAO,EACjD,KAAK,cAAc,IAAIjB,EAAMD,CAAM,CAEvC,CACF,OAAS1D,EAAO,CACd,QAAQ,KAAK,8CAA+CA,CAAK,CACnE,CACF,CAKA,cAAe,CACb,MAAO,CACL,OAAQ,KAAK,OACb,cAAe,OAAO,YAAY,KAAK,aAAa,EACpD,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,CACE,CAKA,aAAa6E,EAAM,CACjB,GAAI,CAKF,GAJIA,EAAK,QACP,KAAK,aAAaA,EAAK,MAAM,EAG3BA,EAAK,cAAe,CACtB,KAAK,cAAc,MAAK,EACxB,SAAW,CAAClB,EAAMD,CAAM,IAAK,OAAO,QAAQmB,EAAK,aAAa,EAC5D,KAAK,cAAc,IAAIlB,EAAMD,CAAM,EAErC,KAAK,qBAAoB,CAC3B,CAEA,MAAO,EACT,OAAS1D,EAAO,CACd,eAAQ,MAAM,kCAAmCA,CAAK,EAC/C,EACT,CACF,CACF,CCnXO,MAAM8E,CAAe,CAC1B,YAAYC,EAAW,CAKrB,GAJA,KAAK,UAAYA,EACjB,KAAK,YAAcA,EAAU,cAAc,aAAa,EACxD,KAAK,cAAgBA,EAAU,cAAc,aAAa,EAEtD,CAAC,KAAK,aAAe,CAAC,KAAK,cAC7B,MAAM,IAAI,MAAM,kCAAkC,EAIpD,KAAK,cAAgB,IAAIvC,EAAkB,CACzC,UAAW,GACX,IAAK,IACL,UAAW,QACX,WAAY,CAClB,CAAK,EAED,KAAK,aAAe,KACpB,KAAK,cAAgB,KAErB,KAAK,iBAAgB,CACvB,CAKA,oBAAoBC,EAAQ,CAC1B,KAAK,cAAc,aAAaA,CAAM,EACtC,KAAK,iBAAgB,CACvB,CAKA,gBAAgBiB,EAAQ,CACtB,KAAK,aAAeA,EACpB,KAAK,iBAAgB,CACvB,CAKA,gBAAgB9D,EAAU,CACxB,KAAK,cAAgBA,CACvB,CAKA,gBAAgB+C,EAAcqC,EAAW,IAAK,CAC5C,MAAMvD,EAAS,KAAK,YAAY,cAAc,iBAAiBkB,CAAY,IAAI,EAC1ElB,IAGL,KAAK,gBAAe,EAGpBA,EAAO,UAAU,IAAI,SAAS,EAG9B,WAAW,IAAM,CACfA,EAAO,UAAU,OAAO,SAAS,CACnC,EAAGuD,CAAQ,EACb,CAKA,eAAerC,EAAc,CAE3B,KAAK,YAAY,iBAAiB,SAAS,EAAE,QAAQsC,GAAK,CACxDA,EAAE,UAAU,OAAO,MAAM,CAC3B,CAAC,EAGD,MAAMxD,EAAS,KAAK,YAAY,cAAc,iBAAiBkB,CAAY,IAAI,EAC3ElB,GACFA,EAAO,UAAU,IAAI,MAAM,CAE/B,CAKA,iBAAkB,CAChB,KAAK,YAAY,iBAAiB,SAAS,EAAE,QAAQA,GAAU,CAC7DA,EAAO,UAAU,OAAO,UAAW,MAAM,CAC3C,CAAC,CACH,CAKA,kBAAmB,CACjB,OAAO,KAAK,cAAc,UAAS,CACrC,CAKA,sBAAuB,CACrB,OAAO,KAAK,cAAc,qBAAoB,CAChD,CAKA,kBAAmB,CACjB,MAAMgB,EAAS,KAAK,cAAc,UAAS,EAG3C,KAAK,YAAY,UAAY,oBAAoBA,EAAO,SAAS,GAGjE,KAAK,cAAc,UAAY,sBAAsBA,EAAO,SAAS,GACrE,KAAK,cAAc,YAAc,IAGT,KAAK,YAAY,iBAAiB,4BAA4B,EACtE,QAAQhB,GAAUA,EAAO,OAAM,CAAE,EAG7C,KAAK,aACP,KAAK,qBAAoB,EAEzB,KAAK,uBAAsB,CAE/B,CAKA,sBAAuB,CACrB,GAAI,CAAC,KAAK,aAAc,OAExB,MAAMgB,EAAS,KAAK,cAAc,UAAS,EACrCW,EAAY,KAAK,aAAa,UAEpC,QAASjD,EAAI,EAAGA,GAAKsC,EAAO,UAAWtC,IAAK,CAC1C,MAAMsB,EAAS,SAAS,cAAc,KAAK,EAM3C,GALAA,EAAO,UAAY,iBAAiBgB,EAAO,SAAS,GACpDhB,EAAO,QAAQ,OAAStB,EAAE,SAAQ,EAClCsB,EAAO,YAActB,EAAE,SAAQ,EAG3BiD,EAAUjD,CAAC,EAAG,CAEhB,MAAM+E,EAAW,KAAK,YAAY,sBAAqB,EACjDC,EAAYD,EAAS,OAAS,IAC9BE,EAAaF,EAAS,QAAU,IAChCG,EAAc,IACdC,EAAe,IAEfC,EAASJ,EAAYE,EACrBG,EAASJ,EAAaE,EAEtBhC,EAAIF,EAAUjD,CAAC,EAAE,EAAIoF,EACrBhC,EAAIH,EAAUjD,CAAC,EAAE,EAAIqF,EAE3B/D,EAAO,MAAM,SAAW,WACxBA,EAAO,MAAM,KAAO6B,EAAI,KACxB7B,EAAO,MAAM,IAAM8B,EAAI,IACzB,MAEE,KAAK,yBAAyB9B,EAAQtB,EAAGsC,EAAO,SAAS,EAI3DhB,EAAO,iBAAiB,QAAS,IAAM,CACjC,KAAK,eACP,KAAK,cAActB,CAAC,CAExB,CAAC,EAED,KAAK,YAAY,YAAYsB,CAAM,CACrC,CACF,CAKA,wBAAyB,CACvB,MAAMgB,EAAS,KAAK,cAAc,UAAS,EAE3C,QAAStC,EAAI,EAAGA,GAAKsC,EAAO,UAAWtC,IAAK,CAC1C,MAAMsB,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,iBAAiBgB,EAAO,SAAS,GACpDhB,EAAO,QAAQ,OAAStB,EAAE,SAAQ,EAClCsB,EAAO,YAActB,EAAE,SAAQ,EAE/B,KAAK,yBAAyBsB,EAAQtB,EAAGsC,EAAO,SAAS,EAGzDhB,EAAO,iBAAiB,QAAS,IAAM,CACjC,KAAK,eACP,KAAK,cAActB,CAAC,CAExB,CAAC,EAED,KAAK,YAAY,YAAYsB,CAAM,CACrC,CACF,CAKA,yBAAyBA,EAAQgE,EAAOC,EAAY,CAClD,MAAMR,EAAW,KAAK,YAAY,sBAAqB,EACjDS,EAAS,KAAK,IAAIT,EAAS,MAAOA,EAAS,MAAM,EAAI,EAAI,GAGzD7B,EAAS,EAAI,KAAK,IAAMoC,EAAQ,GAAMC,EAAa,KAAK,GAAK,EAC7DpC,EAAI,KAAK,IAAID,CAAK,EAAIsC,EACtBpC,EAAI,KAAK,IAAIF,CAAK,EAAIsC,EAG5BlE,EAAO,MAAM,SAAW,WACxBA,EAAO,MAAM,KAAO,cAAc6B,CAAC,aACnC7B,EAAO,MAAM,IAAM,cAAc8B,CAAC,YACpC,CAKA,QAAS,CAEF,KAAK,cACR,KAAK,iBAAgB,CAEzB,CAKA,aAAc,CACZ,OAAO,KAAK,cAAc,YAAW,CACvC,CAKA,sBAAsBZ,EAAc,CAClC,MAAMhC,EAAY,KAAK,cAAc,mBAAmBgC,CAAY,EACpE,GAAI,CAAChC,EAAW,OAAO,KAEvB,MAAMS,EAAY,CAChB,OAAQuB,EACR,WAAY,IACZ,UAAWhC,EACX,gBAAiBA,CACvB,EAEI,YAAK,gBAAgBgC,CAAY,EAC1BvB,CACT,CAKA,WAAWoC,EAAY,CACrB,MAAMoC,EAAe,KAAK,cAAc,WAAWpC,CAAU,EAC7D,OAAIoC,EACF,KAAK,gBAAgBA,CAAY,EAEjC,KAAK,gBAAgB,IAAI,EAE3B,KAAK,iBAAgB,EACd,EACT,CAKA,kBAAkBjD,EAAc,CAC9B,OAAO,KAAK,cAAc,kBAAkBA,CAAY,CAC1D,CAKA,eAAgB,CACd,OAAO,KAAK,cAAc,cAAa,CACzC,CAKA,sBAAsBvB,EAAW,CAC/B,KAAK,gBAAgBA,EAAU,OAAQ,GAAG,EAG1C,MAAMK,EAAS,KAAK,YAAY,cAAc,iBAAiBL,EAAU,MAAM,IAAI,EACnF,GAAIK,GAAUL,EAAU,WAAY,CAClC,MAAMyE,EAAgB,SAAS,cAAc,KAAK,EAClDA,EAAc,UAAY,uBAC1BA,EAAc,MAAM,MAAQ,GAAGzE,EAAU,WAAa,GAAG,IACzDK,EAAO,YAAYoE,CAAa,EAEhC,WAAW,IAAM,CACfA,EAAc,OAAM,CACtB,EAAG,GAAG,CACR,CACF,CAKA,sBAAsBlF,EAAW,CAC/B,MAAMmF,EAAW,KAAK,cAAc,iBAAiBnF,CAAS,EAGxDoF,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,qBACpBA,EAAQ,UAAY;AAAA,mCACWpF,EAAU,QAAQ,CAAC,CAAC;AAAA,kCACrBmF,EAAS,WAAW;AAAA,8BACxBA,EAAS,OAAS,UAAY,aAAa;AAAA,UAC/DA,EAAS,SAAW,EAAI,IAAM,EAAE,GAAGA,EAAS,QAAQ;AAAA;AAAA,MAI1D,KAAK,UAAU,YAAYC,CAAO,EAElC,WAAW,IAAM,CACfA,EAAQ,OAAM,CAChB,EAAG,GAAI,CACT,CAKA,iBAAkB,CAChB,MAAO,CACL,cAAe,KAAK,iBAAgB,EACpC,aAAc,KAAK,aACnB,SAAU,KAAK,YAAW,EAC1B,kBAAmB,KAAK,qBAAoB,CAClD,CACE,CAKA,gBAAgBC,EAAO,CACrB,OAAIA,EAAM,eACR,KAAK,oBAAoBA,EAAM,aAAa,EAG1CA,EAAM,cACR,KAAK,gBAAgBA,EAAM,YAAY,EAGlC,EACT,CACF,CCrWO,MAAMC,CAAgB,CAC3B,YAAYlB,EAAWmB,EAAY,CAYjC,GAXA,KAAK,UAAYnB,EACjB,KAAK,WAAamB,EAGlB,KAAK,aAAenB,EAAU,cAAc,iBAAiB,EAC7D,KAAK,kBAAoBA,EAAU,cAAc,oBAAoB,EACrE,KAAK,WAAaA,EAAU,cAAc,eAAe,EACzD,KAAK,YAAcA,EAAU,cAAc,gBAAgB,EAC3D,KAAK,aAAeA,EAAU,cAAc,iBAAiB,EAC7D,KAAK,YAAcA,EAAU,cAAc,eAAe,EAEtD,CAAC,KAAK,cAAgB,CAAC,KAAK,mBAAqB,CAAC,KAAK,YACvD,CAAC,KAAK,aAAe,CAAC,KAAK,cAAgB,CAAC,KAAK,YACnD,MAAM,IAAI,MAAM,8CAA8C,EAGhE,KAAK,SAAW,CAAA,EAChB,KAAK,UAAY,GACjB,KAAK,iBAAmB,KACxB,KAAK,iBAAmB,KACxB,KAAK,QAAU,KACf,KAAK,aAAe,KAEpB,KAAK,oBAAmB,EACxB,KAAK,qBAAoB,EACzB,KAAK,sBAAqB,CAC5B,CAKA,qBAAsB,CACpB,KAAK,WAAW,iBAAiB,QAAS,IAAM,KAAK,cAAc,EACnE,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,eAAe,EACrE,KAAK,aAAa,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EACvE,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,OAAO,CAC/D,CAKA,oBAAoBtC,EAAQ,CAC1B,KAAK,WAAaA,EAClB,KAAK,qBAAoB,CAC3B,CAKA,kBAAkB7C,EAAU,CAC1B,KAAK,iBAAmBA,CAC1B,CAKA,mBAAmBA,EAAU,CAC3B,KAAK,iBAAmBA,CAC1B,CAKA,gBAAgBA,EAAU,CACxB,KAAK,QAAUA,CACjB,CAKA,iBAAiBA,EAAU,CACzB,KAAK,aAAeA,CACtB,CAKA,sBAAuB,CACrB,KAAK,aAAa,UAAY,GAE9B,QAASO,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAAK,CACnD,MAAMgG,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,kBACtBA,EAAU,UAAY;AAAA,qCACShG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAShCgG,EAAU,iBAAiB,QAAUC,GAAM,CACzC,MAAMC,EAASD,EAAE,OACbC,EAAO,UAAU,SAAS,YAAY,EACxC,KAAK,mBAAmBF,EAAWE,EAAO,QAAQ,MAAM,EAC9CA,EAAO,QAAQ,kBAAkB,GAC3C,KAAK,kBAAkBlG,EAAG,KAAK,kBAAkBgG,CAAS,CAAC,CAE/D,CAAC,EAED,KAAK,aAAa,YAAYA,CAAS,CACzC,CACF,CAKA,mBAAmBA,EAAWjD,EAAQ,OAEpCiD,EAAU,iBAAiB,aAAa,EAAE,QAAQG,GAAO,CACvDA,EAAI,UAAU,OAAO,QAAQ,CAC/B,CAAC,GACDC,EAAAJ,EAAU,cAAc,iBAAiBjD,CAAM,IAAI,IAAnD,MAAAqD,EAAsD,UAAU,IAAI,SACtE,CAKA,kBAAkBJ,EAAW,CAC3B,MAAMK,EAAYL,EAAU,cAAc,oBAAoB,EAC9D,OAAOK,GAAA,YAAAA,EAAW,QAAQ,SAAU,QACtC,CAKA,kBAAkB7D,EAAcO,EAAQ,CACtC,MAAMD,EAAO,CACX,OAAQN,EACR,OAAQO,CACd,EAEI,KAAK,SAAS,KAAKD,CAAI,EACvB,KAAK,sBAAqB,EAGtB,KAAK,kBACP,KAAK,iBAAiB,CAAC,GAAG,KAAK,QAAQ,CAAC,EAGtC,KAAK,cACP,KAAK,aAAaN,CAAY,CAElC,CAKA,uBAAuB8C,EAAO,CACxBA,GAAS,GAAKA,EAAQ,KAAK,SAAS,SACtC,KAAK,SAAS,OAAOA,EAAO,CAAC,EAC7B,KAAK,sBAAqB,EAEtB,KAAK,kBACP,KAAK,iBAAiB,CAAC,GAAG,KAAK,QAAQ,CAAC,EAG9C,CAKA,uBAAwB,CACtB,GAAI,KAAK,SAAS,SAAW,EAAG,CAC9B,KAAK,kBAAkB,UAAY,4FACnC,MACF,CAEA,KAAK,kBAAkB,UAAY,GAEnC,KAAK,SAAS,QAAQ,CAACxC,EAAMwC,IAAU,CACrC,MAAMgB,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,gBAEpB,MAAMC,EAAezD,EAAK,SAAW,OACjC,wCACAA,EAAK,SAAW,MAChB,uCACA,GAEJwD,EAAQ,UAAY;AAAA,mCACSxD,EAAK,MAAM;AAAA,UACpCyD,CAAY;AAAA,kDAC4BjB,CAAK;AAAA,QAI/BgB,EAAQ,cAAc,cAAc,EAC5C,iBAAiB,QAAUL,GAAM,CACzCA,EAAE,gBAAe,EACjB,KAAK,uBAAuBX,CAAK,CACnC,CAAC,EAED,KAAK,kBAAkB,YAAYgB,CAAO,CAC5C,CAAC,CACH,CAKA,MAAM,cAAe,CACnB,GAAI,KAAK,SAAS,SAAW,EAAG,CAC9B,MAAM,8CAA8C,EACpD,MACF,CAEA,GAAI,MAAK,UAET,MAAK,UAAY,GACjB,KAAK,WAAW,YAAc,gBAC9B,KAAK,WAAW,aAAa,WAAY,MAAM,EAE/C,GAAI,CACF,QAAStG,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQA,IAAK,CAC7C,MAAM8C,EAAO,KAAK,SAAS9C,CAAC,EAGtBwG,EAAgB,KAAK,kBAAkB,iBAAiB,gBAAgB,EAC9EA,EAAc,QAAQC,GAAKA,EAAE,UAAU,OAAO,SAAS,CAAC,EACpDD,EAAcxG,CAAC,GACjBwG,EAAcxG,CAAC,EAAE,UAAU,IAAI,SAAS,EAItC,KAAK,cACP,KAAK,aAAa8C,EAAK,MAAM,EAI/B,MAAM,IAAI,QAAQ4D,GAAW,WAAWA,EAAS,GAAG,CAAC,CACvD,CAGsB,KAAK,kBAAkB,iBAAiB,gBAAgB,EAChE,QAAQD,GAAKA,EAAE,UAAU,OAAO,SAAS,CAAC,CAE1D,QAAC,CACC,KAAK,UAAY,GACjB,KAAK,WAAW,YAAc,mBAC9B,KAAK,WAAW,gBAAgB,UAAU,CAC5C,EACF,CAKA,eAAgB,CACd,KAAK,SAAW,CAAA,EAChB,KAAK,sBAAqB,EAEtB,KAAK,kBACP,KAAK,iBAAiB,EAAE,CAE5B,CAKA,gBAAiB,CACf,GAAI,KAAK,SAAS,SAAW,EAAG,CAC9B,MAAM,8CAA8C,EACpD,MACF,CAEI,KAAK,kBACP,KAAK,iBAAiB,CAAC,GAAG,KAAK,QAAQ,CAAC,CAE5C,CAKA,OAAQ,CACF,KAAK,SACP,KAAK,QAAO,CAEhB,CAKA,WAAWE,EAAS,CAClB,KAAK,UAAU,MAAM,QAAUA,EAAU,QAAU,MACrD,CAKA,aAAc,CACZ,MAAO,CAAC,GAAG,KAAK,QAAQ,CAC1B,CAKA,YAAYxC,EAAU,CACpB,KAAK,SAAW,CAAC,GAAGA,CAAQ,EAC5B,KAAK,sBAAqB,EAEtB,KAAK,kBACP,KAAK,iBAAiB,CAAC,GAAG,KAAK,QAAQ,CAAC,CAE5C,CAKA,oBAAqB,CACnB,OAAO,KAAK,SAAS,IAAIrB,GACnBA,EAAK,SAAW,OACX,GAAGA,EAAK,MAAM,IACZA,EAAK,SAAW,MAClB,GAAGA,EAAK,MAAM,IAEdA,EAAK,MAEf,CACH,CAKA,OAAO,mBAAmB8D,EAAU,CAClC,OAAOA,EAAS,IAAI9D,GACd,OAAOA,GAAS,SACdA,EAAK,SAAS,GAAG,EACZ,CACL,OAAQ,SAASA,EAAK,MAAM,EAAG,EAAE,CAAC,EAClC,OAAQ,MACpB,EACmBA,EAAK,SAAS,GAAG,EACnB,CACL,OAAQ,SAASA,EAAK,MAAM,EAAG,EAAE,CAAC,EAClC,OAAQ,KACpB,EAEiB,CACL,OAAQ,SAASA,CAAI,EACrB,OAAQ,QACpB,EAGe,CACL,OAAQA,EACR,OAAQ,QAClB,CAEK,CACH,CAKA,uBAAuB+D,EAAS,EAAG,CACjC,KAAK,cAAa,EAElB,QAAS7G,EAAI,EAAGA,EAAI6G,EAAQ7G,IAAK,CAC/B,MAAMwC,EAAe,KAAK,MAAM,KAAK,OAAM,EAAK,KAAK,WAAW,SAAS,EAAI,EACvEsE,EAAU,CAAC,MAAO,SAAU,MAAM,EAClC/D,EAAS+D,EAAQ,KAAK,MAAM,KAAK,OAAM,EAAKA,EAAQ,MAAM,CAAC,EAEjE,KAAK,kBAAkBtE,EAAcO,CAAM,CAC7C,CACF,CAKA,eAAe2B,EAAM,CACnB,GAAI,CACF,IAAIP,EAEJ,GAAI,OAAOO,GAAS,SAElBP,EAAW,KAAK,MAAMO,CAAI,UACjB,MAAM,QAAQA,CAAI,EAC3BP,EAAWO,MAEX,OAAM,IAAI,MAAM,yBAAyB,EAI3C,GAAI,CAAC,MAAM,QAAQP,CAAQ,EACzB,MAAM,IAAI,MAAM,2BAA2B,EAG7C,UAAWrB,KAAQqB,EAAU,CAC3B,GAAI,CAACrB,EAAK,QAAUA,EAAK,OAAS,GAAKA,EAAK,OAAS,KAAK,WAAW,UACnE,MAAM,IAAI,MAAM,0BAA0BA,EAAK,MAAM,EAAE,EAEzD,GAAIA,EAAK,QAAU,CAAC,CAAC,MAAO,SAAU,MAAM,EAAE,SAASA,EAAK,MAAM,EAChE,MAAM,IAAI,MAAM,mBAAmBA,EAAK,MAAM,EAAE,CAEpD,CAEA,YAAK,YAAYqB,CAAQ,EAClB,EAET,OAAStE,EAAO,CACd,eAAQ,MAAM,6BAA8BA,CAAK,EACjD,MAAM,8BAA8BA,EAAM,OAAO,EAAE,EAC5C,EACT,CACF,CAKA,kBAAmB,CACjB,GAAI,KAAK,SAAS,SAAW,EAC3B,OAAO,KAGT,MAAMkH,EAAc,CAAA,EACdC,EAAc,CAAE,IAAK,EAAG,OAAQ,EAAG,KAAM,CAAC,EAChD,IAAIC,EAAe,IAAI,IAEvB,UAAWnE,KAAQ,KAAK,SACtBiE,EAAYjE,EAAK,MAAM,GAAKiE,EAAYjE,EAAK,MAAM,GAAK,GAAK,EAC7DkE,EAAYlE,EAAK,MAAM,GAAKkE,EAAYlE,EAAK,MAAM,GAAK,GAAK,EAC7DmE,EAAa,IAAInE,EAAK,MAAM,EAG9B,MAAO,CACL,OAAQ,KAAK,SAAS,OACtB,cAAemE,EAAa,KAC5B,YAAaF,EACb,YAAaC,EACb,SAAWC,EAAa,KAAO,KAAK,WAAW,UAAa,GAClE,CACE,CACF,CCnbO,MAAMC,CAAc,CACzB,YAAYtC,EAAWmB,EAAY,CAWjC,GAVA,KAAK,UAAYnB,EACjB,KAAK,WAAamB,EAGlB,KAAK,OAASnB,EAAU,cAAc,eAAe,EACrD,KAAK,WAAaA,EAAU,cAAc,aAAa,EACvD,KAAK,YAAcA,EAAU,cAAc,cAAc,EACzD,KAAK,YAAcA,EAAU,cAAc,qBAAqB,EAChE,KAAK,UAAYA,EAAU,cAAc,aAAa,EAElD,CAAC,KAAK,QAAU,CAAC,KAAK,YAAc,CAAC,KAAK,aAC1C,CAAC,KAAK,aAAe,CAAC,KAAK,UAC7B,MAAM,IAAI,MAAM,4CAA4C,EAI9D,KAAK,cAAgB,KAAK,sBAAqB,EAE/C,KAAK,UAAY,CACf,WAAY,GACZ,YAAa,KACb,WAAY,CAAE,EAAG,EAAG,EAAG,CAAC,CAC9B,EAEI,KAAK,cAAgB,KACrB,KAAK,QAAU,KAEf,KAAK,oBAAmB,EACxB,KAAK,uBAAsB,CAC7B,CAKA,qBAAsB,CACpB,KAAK,WAAW,iBAAiB,QAAS,IAAM,KAAK,YAAY,EACjE,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,aAAa,EACnE,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,OAAO,EAG7D,KAAK,OAAO,iBAAiB,YAAcqB,GAAM,KAAK,gBAAgBA,CAAC,CAAC,EACxE,KAAK,OAAO,iBAAiB,YAAcA,GAAM,KAAK,gBAAgBA,CAAC,CAAC,EACxE,KAAK,OAAO,iBAAiB,UAAYA,GAAM,KAAK,cAAcA,CAAC,CAAC,EACpE,KAAK,OAAO,iBAAiB,aAAeA,GAAM,KAAK,cAAcA,CAAC,CAAC,EAGvE,KAAK,OAAO,iBAAiB,aAAeA,GAAM,KAAK,iBAAiBA,CAAC,CAAC,EAC1E,KAAK,OAAO,iBAAiB,YAAcA,GAAM,KAAK,gBAAgBA,CAAC,CAAC,EACxE,KAAK,OAAO,iBAAiB,WAAaA,GAAM,KAAK,eAAeA,CAAC,CAAC,CACxE,CAKA,oBAAoB3D,EAAQ,CAC1B,KAAK,WAAaA,EAClB,KAAK,cAAgB,KAAK,sBAAqB,EAC/C,KAAK,uBAAsB,CAC7B,CAKA,aAAa7C,EAAU,CACrB,KAAK,cAAgBA,CACvB,CAKA,gBAAgBA,EAAU,CACxB,KAAK,QAAUA,CACjB,CAKA,uBAAwB,CACtB,MAAMwD,EAAY,CAAA,EACZkE,EAAa,KAAK,OAAO,sBAAqB,EAC9CC,EAAUD,EAAW,MAAQ,GAAK,IAClCE,EAAUF,EAAW,OAAS,GAAK,IACnC3B,EAAS,KAAK,IAAI4B,EAASC,CAAO,EAAI,GAE5C,QAASrH,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAAK,CACnD,MAAMkD,EAAS,EAAI,KAAK,IAAMlD,EAAI,GAAM,KAAK,WAAW,UAAY,KAAK,GAAK,EACxEmD,EAAIiE,EAAU,KAAK,IAAIlE,CAAK,EAAIsC,EAChCpC,EAAIiE,EAAU,KAAK,IAAInE,CAAK,EAAIsC,EAEtCvC,EAAUjD,CAAC,EAAI,CAAE,EAAAmD,EAAG,EAAAC,CAAC,CACvB,CAEA,MAAO,CACL,KAAM,UAAU,KAAK,WAAW,SAAS,eACzC,UAAWH,CACjB,CACE,CAKA,wBAAyB,CACvB,KAAK,OAAO,UAAY,GAGxB,MAAMqE,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,gBACtBA,EAAU,YAAc,IACxB,KAAK,OAAO,YAAYA,CAAS,EAGjC,QAAStH,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAAK,CACnD,MAAMgG,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,mBACtBA,EAAU,QAAQ,OAAShG,EAAE,SAAQ,EACrCgG,EAAU,YAAchG,EAAE,SAAQ,EAClCgG,EAAU,UAAY,GAGtB,MAAMuB,EAAM,KAAK,cAAc,UAAUvH,CAAC,EACtCuH,IACFvB,EAAU,MAAM,KAAOuB,EAAI,EAAI,KAC/BvB,EAAU,MAAM,IAAMuB,EAAI,EAAI,MAGhC,KAAK,OAAO,YAAYvB,CAAS,CACnC,CACF,CAKA,gBAAgBC,EAAG,CACjB,MAAMC,EAASD,EAAE,OACZC,EAAO,UAAU,SAAS,kBAAkB,IAEjDD,EAAE,eAAc,EAChB,KAAK,UAAUC,EAAQD,EAAE,QAASA,EAAE,OAAO,EAC7C,CAKA,gBAAgBA,EAAG,CACb,CAAC,KAAK,UAAU,YAAc,CAAC,KAAK,UAAU,cAElDA,EAAE,eAAc,EAChB,KAAK,mBAAmBA,EAAE,QAASA,EAAE,OAAO,EAC9C,CAKA,cAAcA,EAAG,CACX,KAAK,UAAU,YACjB,KAAK,QAAO,CAEhB,CAKA,iBAAiBA,EAAG,CAClB,MAAMC,EAASD,EAAE,OACjB,GAAI,CAACC,EAAO,UAAU,SAAS,kBAAkB,EAAG,OAEpDD,EAAE,eAAc,EAChB,MAAMuB,EAAQvB,EAAE,QAAQ,CAAC,EACzB,KAAK,UAAUC,EAAQsB,EAAM,QAASA,EAAM,OAAO,CACrD,CAKA,gBAAgBvB,EAAG,CACjB,GAAI,CAAC,KAAK,UAAU,YAAc,CAAC,KAAK,UAAU,YAAa,OAE/DA,EAAE,eAAc,EAChB,MAAMuB,EAAQvB,EAAE,QAAQ,CAAC,EACzB,KAAK,mBAAmBuB,EAAM,QAASA,EAAM,OAAO,CACtD,CAKA,eAAevB,EAAG,CACZ,KAAK,UAAU,YACjB,KAAK,QAAO,CAEhB,CAKA,UAAUwB,EAASC,EAASC,EAAS,CAChB,KAAK,OAAO,sBAAqB,EACpD,MAAMC,EAAcH,EAAQ,sBAAqB,EAEjD,KAAK,UAAY,CACf,WAAY,GACZ,YAAaA,EACb,WAAY,CACV,EAAGC,EAAUE,EAAY,KACzB,EAAGD,EAAUC,EAAY,GACjC,CACA,EAEIH,EAAQ,UAAU,IAAI,UAAU,EAChC,KAAK,OAAO,UAAU,IAAI,iBAAiB,CAC7C,CAKA,mBAAmBC,EAASC,EAAS,CACnC,GAAI,CAAC,KAAK,UAAU,YAAa,OAEjC,MAAMR,EAAa,KAAK,OAAO,sBAAqB,EACpD,IAAIhE,EAAIuE,EAAUP,EAAW,KAAO,KAAK,UAAU,WAAW,EAC1D/D,EAAIuE,EAAUR,EAAW,IAAM,KAAK,UAAU,WAAW,EAG7D,MAAMU,EAAc,GACdC,EAAe,GAErB3E,EAAI,KAAK,IAAI,EAAG,KAAK,IAAIA,EAAGgE,EAAW,MAAQU,CAAW,CAAC,EAC3DzE,EAAI,KAAK,IAAI,EAAG,KAAK,IAAIA,EAAG+D,EAAW,OAASW,CAAY,CAAC,EAE7D,KAAK,UAAU,YAAY,MAAM,KAAO3E,EAAI,KAC5C,KAAK,UAAU,YAAY,MAAM,IAAMC,EAAI,IAC7C,CAKA,SAAU,CACR,GAAI,CAAC,KAAK,UAAU,YAAa,OAEjC,MAAMqE,EAAU,KAAK,UAAU,YACzBjF,EAAe,SAASiF,EAAQ,QAAQ,QAAU,GAAG,EAEvDjF,EAAe,IAEjB,KAAK,cAAc,UAAUA,CAAY,EAAI,CAC3C,EAAG,WAAWiF,EAAQ,MAAM,IAAI,EAChC,EAAG,WAAWA,EAAQ,MAAM,GAAG,CACvC,GAGIA,EAAQ,UAAU,OAAO,UAAU,EACnC,KAAK,OAAO,UAAU,OAAO,iBAAiB,EAE9C,KAAK,UAAY,CACf,WAAY,GACZ,YAAa,KACb,WAAY,CAAE,EAAG,EAAG,EAAG,CAAC,CAC9B,CACE,CAKA,YAAa,CACX,MAAMM,EAAa,KAAK,UAAU,MAAM,KAAI,EAC5C,GAAI,CAACA,EAAY,CACf,MAAM,oCAAoC,EAC1C,KAAK,UAAU,MAAK,EACpB,MACF,CAEA,MAAMxE,EAAS,CACb,KAAMwE,EACN,UAAW,CAAE,GAAG,KAAK,cAAc,SAAS,CAClD,EAEQ,KAAK,eACP,KAAK,cAAcxE,CAAM,EAG3B,MAAM,WAAWwE,CAAU,uBAAuB,CACpD,CAKA,aAAc,CACR,QAAQ,wDAAwD,IAClE,KAAK,cAAgB,KAAK,sBAAqB,EAC/C,KAAK,uBAAsB,EAE/B,CAKA,OAAQ,CACF,KAAK,SACP,KAAK,QAAO,CAEhB,CAKA,WAAWpB,EAAS,CAClB,KAAK,UAAU,MAAM,QAAUA,EAAU,QAAU,OAC/CA,IAEF,KAAK,UAAU,MAAQ,KAAK,cAAc,MAAQ,GAEtD,CAKA,WAAWpD,EAAQ,CACjB,KAAK,cAAgB,CACnB,KAAMA,EAAO,KACb,UAAW,CAAE,GAAGA,EAAO,SAAS,CACtC,EAEI,KAAK,UAAU,MAAQA,EAAO,KAC9B,KAAK,uBAAsB,CAC7B,CAKA,kBAAmB,CACjB,MAAO,CACL,KAAM,KAAK,cAAc,KACzB,UAAW,CAAE,GAAG,KAAK,cAAc,SAAS,CAClD,CACE,CAKA,mBAAmBb,EAAS,CAC1B,MAAMyE,EAAa,KAAK,OAAO,sBAAqB,EAC9CC,EAAUD,EAAW,MAAQ,GAAK,IAClCE,EAAUF,EAAW,OAAS,GAAK,IACnClE,EAAY,CAAA,EAElB,OAAQP,EAAO,CACb,IAAK,SACH,MAAM8C,EAAS,KAAK,IAAI4B,EAASC,CAAO,EAAI,GAC5C,QAASrH,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAAK,CACnD,MAAMkD,EAAS,EAAI,KAAK,IAAMlD,EAAI,GAAM,KAAK,WAAW,UAAY,KAAK,GAAK,EAC9EiD,EAAUjD,CAAC,EAAI,CACb,EAAGoH,EAAU,KAAK,IAAIlE,CAAK,EAAIsC,EAC/B,EAAG6B,EAAU,KAAK,IAAInE,CAAK,EAAIsC,CAC3C,CACQ,CACA,MAEF,IAAK,OACH,MAAMwC,EAAO,KAAK,KAAK,KAAK,KAAK,KAAK,WAAW,SAAS,CAAC,EACrDC,EAAU,KAAK,IAAId,EAAW,MAAOA,EAAW,MAAM,GAAKa,EAAO,GACxE,QAAShI,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAAK,CACnD,MAAMkI,EAAM,KAAK,OAAOlI,EAAI,GAAKgI,CAAI,EAC/BG,GAAOnI,EAAI,GAAKgI,EACtB/E,EAAUjD,CAAC,EAAI,CACb,EAAGiI,GAAWE,EAAM,GACpB,EAAGF,GAAWC,EAAM,EAChC,CACQ,CACA,MAEF,IAAK,SACH,IAAIhF,EAAQ,EACRkF,EAAe,GACnB,MAAMC,EAAe,GACrB,QAASrI,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAC9CiD,EAAUjD,CAAC,EAAI,CACb,EAAGoH,EAAU,KAAK,IAAIlE,CAAK,EAAIkF,EAC/B,EAAGf,EAAU,KAAK,IAAInE,CAAK,EAAIkF,CAC3C,EACUlF,GAAS,GACTkF,GAAgBC,EAElB,MAEF,IAAK,OACH,MAAMC,GAAgBnB,EAAW,MAAQ,KAAO,KAAK,WAAW,UAAY,GAC5E,QAASnH,EAAI,EAAGA,GAAK,KAAK,WAAW,UAAWA,IAC9CiD,EAAUjD,CAAC,EAAI,CACb,EAAG,IAAMA,EAAI,GAAKsI,EAClB,EAAGjB,CACf,EAEQ,MAEF,QACE,QAAQ,KAAK,oBAAoB3E,CAAO,EAAE,EAC1C,MACR,CAEI,KAAK,cAAc,UAAYO,EAC/B,KAAK,uBAAsB,CAC7B,CAKA,cAAe,CACb,MAAMsF,EAAa,CACjB,GAAG,KAAK,iBAAgB,EACxB,WAAY,KAAK,WACjB,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EAEUC,EAAO,IAAI,KAAK,CAAC,KAAK,UAAUD,EAAY,KAAM,CAAC,CAAC,EAAG,CAAE,KAAM,kBAAkB,CAAE,EACnFE,EAAM,IAAI,gBAAgBD,CAAI,EAE9B3H,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAO4H,EACT5H,EAAE,SAAW,sBAAsB0H,EAAW,KAAK,QAAQ,OAAQ,GAAG,CAAC,QACvE1H,EAAE,MAAK,EAEP,IAAI,gBAAgB4H,CAAG,CACzB,CAKA,aAAa/D,EAAM,CACjB,GAAI,CACF,IAAI6D,EASJ,GAPI,OAAO7D,GAAS,SAClB6D,EAAa,KAAK,MAAM7D,CAAI,EAE5B6D,EAAa7D,EAIX,CAAC6D,EAAW,MAAQ,CAACA,EAAW,UAClC,MAAM,IAAI,MAAM,uBAAuB,EAIzC,YAAK,WAAWA,CAAU,EACnB,EAET,OAAS1I,EAAO,CACd,eAAQ,MAAM,2BAA4BA,CAAK,EAC/C,MAAM,4BAA4BA,EAAM,OAAO,EAAE,EAC1C,EACT,CACF,CAKA,gBAAiB,CACf,MAAMoD,EAAY,OAAO,OAAO,KAAK,cAAc,SAAS,EAC5D,GAAIA,EAAU,SAAW,EAAG,OAAO,KAEnC,MAAMyF,EAAKzF,EAAU,IAAI0F,GAAKA,EAAE,CAAC,EAC3BC,EAAK3F,EAAU,IAAI0F,GAAKA,EAAE,CAAC,EAEjC,MAAO,CACL,YAAa1F,EAAU,OACvB,OAAQ,CACN,KAAM,KAAK,IAAI,GAAGyF,CAAE,EACpB,KAAM,KAAK,IAAI,GAAGA,CAAE,EACpB,KAAM,KAAK,IAAI,GAAGE,CAAE,EACpB,KAAM,KAAK,IAAI,GAAGA,CAAE,CAC5B,EACM,OAAQ,CACN,EAAGF,EAAG,OAAO,CAAC7H,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAI4H,EAAG,OACtC,EAAGE,EAAG,OAAO,CAAC/H,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAI8H,EAAG,MAC9C,CACA,CACE,CACF,CCxdA,MAAMC,CAAc,CAClB,aAAc,CACZ,KAAK,aAAe,KACpB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,KACvB,KAAK,cAAgB,KAGrB,KAAK,YAAc,GACnB,KAAK,cAAgB,CACnB,UAAW,GACX,IAAK,IACL,UAAW,QACX,WAAY,CAClB,EACI,KAAK,iBAAmB,CAAA,EAExB,KAAK,mBAAkB,EACvB,KAAK,oBAAmB,EACxB,KAAK,qBAAoB,EACzB,KAAK,SAAQ,CACf,CAKA,oBAAqB,CAEnB,KAAK,WAAa,SAAS,cAAc,cAAc,EACvD,KAAK,WAAa,SAAS,iBAAiB,MAAM,EAClD,KAAK,UAAY,SAAS,iBAAiB,cAAc,EAGzD,KAAK,YAAc,SAAS,eAAe,aAAa,EACxD,KAAK,WAAa,KAClB,KAAK,cAAgB,SAAS,eAAe,gBAAgB,EAG7D,KAAK,kBAAoB,KAAK,0BAAyB,EACvD,KAAK,iBAAmB,SAAS,eAAe,kBAAkB,EAGlE,KAAK,iBAAmB,SAAS,eAAe,kBAAkB,EAClE,KAAK,UAAY,SAAS,cAAc,gBAAgB,EACxD,KAAK,cAAgB,SAAS,eAAe,QAAQ,EACrD,KAAK,YAAc,SAAS,eAAe,cAAc,EAGzD,KAAK,eAAiB,SAAS,eAAe,WAAW,EACzD,KAAK,UAAY,SAAS,eAAe,SAAS,EAClD,KAAK,YAAc,SAAS,eAAe,WAAW,EACtD,KAAK,aAAe,SAAS,eAAe,YAAY,EACxD,KAAK,aAAe,KAAK,mBAAkB,EAC3C,KAAK,iBAAmB,SAAS,eAAe,mBAAmB,EAGnE,KAAK,eAAiB,SAAS,eAAe,eAAe,EAC7D,KAAK,aAAe,SAAS,eAAe,WAAW,EAGvD,KAAK,iBAAmB,SAAS,eAAe,gBAAgB,EAGvC,CACvB,KAAK,WAAY,KAAK,YAAa,KAAK,cACxC,KAAK,UAAW,KAAK,cAAe,KAAK,eACzC,KAAK,UAAW,KAAK,WAC3B,EAE6C,OAAOC,GAAM,CAACA,CAAE,EACrC,OAAS,GAC3B,QAAQ,KAAK,yDAAyD,CAE1E,CAKA,2BAA4B,CAE1B,IAAIC,EAAoB,SAAS,eAAe,mBAAmB,EACnE,GAAIA,EAAmB,OAAOA,EAG9B,MAAMC,EAAc,SAAS,cAAc,WAAW,EACtD,GAAIA,EAAa,CACf,MAAMC,EAAmB,SAAS,cAAc,KAAK,EACrD,OAAAA,EAAiB,UAAY,eAC7BA,EAAiB,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQ7BD,EAAY,YAAYC,CAAgB,EACjC,SAAS,eAAe,mBAAmB,CACpD,CACA,OAAO,IACT,CAKA,oBAAqB,CAEnB,IAAIC,EAAe,SAAS,eAAe,cAAc,EACzD,GAAIA,EAAc,OAAOA,EAGzB,MAAMC,EAAY,SAAS,eAAe,YAAY,EACtD,GAAIA,EAAW,CACb,MAAMC,EAAc,SAAS,cAAc,KAAK,EAChD,OAAAA,EAAY,UAAY,eACxBA,EAAY,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASxBD,EAAU,YAAYC,CAAW,EAC1B,SAAS,eAAe,cAAc,CAC/C,CACA,OAAO,IACT,CAKA,qBAAsB,CAEpB,KAAK,WAAW,QAAQC,GAAU,CAChCA,EAAO,iBAAiB,QAAU,GAAM,CAEtC,MAAMC,EADS,EAAE,OACI,QAAQ,IACzBA,GACF,KAAK,UAAUA,CAAK,CAExB,CAAC,CACH,CAAC,EAGG,KAAK,aACP,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EAEpE,KAAK,kBACP,KAAK,iBAAiB,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EAEzE,KAAK,eACP,KAAK,cAAc,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EAItE,KAAK,mBACP,KAAK,kBAAkB,iBAAiB,QAAS,IAAM,KAAK,mBAAmB,EAI7E,KAAK,gBACP,KAAK,eAAe,iBAAiB,SAAU,IAAM,KAAK,qBAAqB,EAE7E,KAAK,WACP,KAAK,UAAU,iBAAiB,SAAU,IAAM,KAAK,qBAAqB,EAExE,KAAK,aACP,KAAK,YAAY,iBAAiB,SAAU,IAAM,KAAK,qBAAqB,EAE1E,KAAK,cACP,KAAK,aAAa,iBAAiB,SAAU,IAAM,KAAK,qBAAqB,EAE3E,KAAK,kBACP,KAAK,iBAAiB,iBAAiB,QAAS,IAAM,KAAK,qBAAqB,EAE9E,KAAK,cACP,KAAK,aAAa,iBAAiB,SAAU,IAAM,KAAK,YAAY,EAIlE,KAAK,gBACP,KAAK,eAAe,iBAAiB,QAAS,IAAM,KAAK,uBAAuB,EAIlF,OAAO,iBAAiB,SAAU,IAAM,CAClC,KAAK,gBACP,KAAK,eAAe,OAAM,CAE9B,CAAC,CACH,CAKA,sBAAuB,CACrB,GAAI,CAEF,MAAMC,EAAgB,SAAS,cAAc,iBAAiB,EAC1DA,GACF,KAAK,eAAiB,IAAI5E,EAAe4E,CAAa,EACtD,KAAK,eAAe,gBAAiBjI,GAAW,KAAK,kBAAkBA,CAAM,CAAC,GAE9E,QAAQ,KAAK,2DAA2D,EAI1E,MAAMkI,EAAoB,SAAS,eAAe,iBAAiB,EAC/DA,GACF,KAAK,gBAAkB,IAAI1D,EAAgB0D,EAAmB,KAAK,aAAa,EAChF,KAAK,gBAAgB,kBAAmBrF,GAAa,KAAK,qBAAqBA,CAAQ,CAAC,EACxF,KAAK,gBAAgB,mBAAoBA,GAAa,KAAK,eAAeA,CAAQ,CAAC,EACnF,KAAK,gBAAgB,gBAAgB,IAAM,KAAK,sBAAqB,CAAE,EACvE,KAAK,gBAAgB,iBAAkB7C,GAAW,KAAK,WAAWA,CAAM,CAAC,EACzE,KAAK,gBAAgB,WAAW,EAAK,GAErC,QAAQ,KAAK,sCAAsC,EAIrD,MAAMmI,EAAkB,SAAS,eAAe,eAAe,EAC3DA,GACF,KAAK,cAAgB,IAAIvC,EAAcuC,EAAiB,KAAK,aAAa,EAC1E,KAAK,cAAc,aAAclG,GAAW,KAAK,iBAAiBA,CAAM,CAAC,EACzE,KAAK,cAAc,gBAAgB,IAAM,KAAK,oBAAmB,CAAE,EACnE,KAAK,cAAc,WAAW,EAAK,IAEnC,QAAQ,KAAK,+DAA+D,EAE5E,KAAK,4BAA2B,GAGlC,QAAQ,IAAI,yCAAyC,CAEvD,OAAS1D,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,EACvD,KAAK,WAAW,8DAA+D,SAAS,CAC1F,CACF,CAKA,6BAA8B,CACP,SAAS,eAAe,cAAc,GACvC,KAAK,gBAEvB,QAAQ,IAAI,qDAAqD,CAErE,CAKA,UAAUyJ,EAAO,CAEf,KAAK,WAAW,QAAQD,GAAU,CAChCA,EAAO,UAAU,OAAO,SAAUA,EAAO,QAAQ,MAAQC,CAAK,CAChE,CAAC,EAGD,KAAK,UAAU,QAAQI,GAAS,CAC9BA,EAAM,UAAU,OAAO,SAAUA,EAAM,KAAO,GAAGJ,CAAK,KAAK,CAC7D,CAAC,CACH,CAKA,MAAM,gBAAiB,CACrB,GAAI,OAAK,aAAe,KAAK,cAE7B,GAAI,CAoBF,GAnBA,KAAK,WAAW,mDAAoD,MAAM,EAC1E,KAAK,YAAY,EAAE,EAGnB,KAAK,aAAe,IAAI/J,EAAa,CACnC,QAAS,KACT,YAAa,WAAW,KAAK,kBAAkB,KAAK,GAAK,GACzD,aAAc,GACtB,CAAO,EAED,KAAK,YAAY,EAAE,EAGnB,KAAK,aAAa,eAAgB0B,GAAc,KAAK,oBAAoBA,CAAS,CAAC,EACnF,KAAK,aAAa,QAASpB,GAAU,KAAK,WAAWA,EAAO,OAAO,CAAC,EAEpE,KAAK,YAAY,EAAE,EAGf,KAAK,eAAgB,CACvB,MAAMH,EAAc,KAAK,eAAe,qBAAoB,EAC5D,KAAK,aAAa,wBAAwBA,CAAW,CACvD,CAEA,KAAK,YAAY,EAAE,EAGnB,MAAM,KAAK,aAAa,eAAc,EAEtC,KAAK,YAAY,GAAG,EAEpB,KAAK,YAAc,GACnB,KAAK,SAAQ,EACb,KAAK,WAAW,wEAAyE,SAAS,EAGlG,KAAK,gBAAe,EAEpB,WAAW,IAAM,KAAK,YAAY,CAAC,EAAG,GAAI,CAE5C,OAASG,EAAO,CACd,QAAQ,MAAM,6BAA8BA,CAAK,EACjD,KAAK,WAAW,8BAA8BA,EAAM,OAAO,GAAI,OAAO,EACtE,KAAK,YAAY,CAAC,EAClB,KAAK,aAAe,IACtB,CACF,CAKA,eAAgB,CACV,CAAC,KAAK,aAAe,CAAC,KAAK,eAE/B,KAAK,aAAa,cAAa,EAC/B,KAAK,aAAe,KACpB,KAAK,YAAc,GACnB,KAAK,SAAQ,EACb,KAAK,WAAW,yBAA0B,MAAM,EAChD,KAAK,sBAAqB,EAC5B,CAKA,MAAM,gBAAiB,CACrB,GAAI,CACF,KAAK,WAAW,+BAAgC,MAAM,EAEtD,MAAM8J,EAAmB,IAAIpK,EACX,MAAMoK,EAAiB,eAAc,EAGrD,KAAK,WAAW,gDAAiD,SAAS,EAE1E,KAAK,WAAW,yBAA0B,OAAO,EAGnDA,EAAiB,cAAa,CAChC,OAAS9J,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,EAC9C,KAAK,WAAW,2BAA2BA,EAAM,OAAO,GAAI,OAAO,CACrE,CACF,CAKA,mBAAoB,CAClB,MAAMF,EAAc,WAAW,KAAK,kBAAkB,KAAK,EAC3D,KAAK,iBAAiB,YAAcA,EAAY,QAAQ,CAAC,EAErD,KAAK,cACP,KAAK,aAAa,eAAeA,CAAW,CAEhD,CAKA,qBAAsB,CACpB,MAAM4C,EAAY,CAChB,UAAW,SAAS,KAAK,eAAe,KAAK,EAC7C,IAAK,KAAK,UAAU,MACpB,UAAW,KAAK,YAAY,MAC5B,WAAY,SAAS,KAAK,aAAa,KAAK,CAClD,EAgBI,GAdA,KAAK,cAAgBA,EAGjB,KAAK,gBACP,KAAK,eAAe,oBAAoBA,CAAS,EAE/C,KAAK,iBACP,KAAK,gBAAgB,oBAAoBA,CAAS,EAEhD,KAAK,eACP,KAAK,cAAc,oBAAoBA,CAAS,EAI9C,KAAK,cAAgB,KAAK,eAAgB,CAC5C,MAAM7C,EAAc,KAAK,eAAe,qBAAoB,EAC5D,KAAK,aAAa,wBAAwBA,CAAW,CACvD,CAEA,KAAK,gBAAe,CACtB,CAKA,YAAa,CACX,MAAM2D,EAAa,KAAK,aAAa,MAChCA,GAED,KAAK,iBACS,KAAK,eAAe,WAAWA,CAAU,GAEvD,KAAK,WAAW,kBAAkBA,CAAU,GAAI,SAAS,EACzD,KAAK,gBAAe,GAEpB,KAAK,WAAW,0BAA0BA,CAAU,GAAI,OAAO,EAGrE,CAKA,oBAAoBpC,EAAW,CAE7B,KAAK,iBAAiB,QAAQA,CAAS,EACnC,KAAK,iBAAiB,OAAS,KACjC,KAAK,iBAAmB,KAAK,iBAAiB,MAAM,EAAG,EAAE,GAIvD,KAAK,gBACP,KAAK,eAAe,sBAAsBA,CAAS,EAIrD,KAAK,uBAAsB,EAG3B,QAAQ,IAAI,+BAA+BA,EAAU,MAAM,KAAKA,EAAU,UAAU,QAAQ,CAAC,CAAC,oBAAoBA,EAAU,WAAa,KAAK,QAAQ,CAAC,CAAC,GAAG,CAC7J,CAKA,kBAAkBK,EAAQ,CACxB,KAAK,WAAWA,CAAM,EAGlB,KAAK,gBACP,KAAK,eAAe,sBAAsBA,CAAM,CAEpD,CAKA,WAAWA,EAAQ,CAEjB,GAAI,KAAK,eAAgB,CACvB,MAAMd,EAAY,KAAK,eAAe,qBAAoB,EAAGc,CAAM,EAC/Dd,GACF,KAAK,qBAAqBA,EAAW,EAAG,EAG1C,KAAK,eAAe,gBAAgBc,EAAQ,GAAG,CACjD,CACF,CAKA,qBAAqBd,EAAWqE,EAAU,CACxC,GAAI,CAAC,OAAO,cAAgB,CAAC,OAAO,mBAAoB,CACtD,QAAQ,KAAK,6BAA6B,EAC1C,MACF,CAEA,GAAI,CACF,MAAM+E,EAAe,IAAK,OAAO,cAAgB,OAAO,oBAGlDC,EAAaD,EAAa,iBAAgB,EAC1CE,EAAWF,EAAa,WAAU,EAGxCC,EAAW,KAAO,OAClBA,EAAW,UAAU,eAAerJ,EAAWoJ,EAAa,WAAW,EAGvE,MAAMG,EAAMH,EAAa,YACzBE,EAAS,KAAK,eAAe,EAAGC,CAAG,EACnCD,EAAS,KAAK,wBAAwB,GAAKC,EAAM,GAAI,EACrDD,EAAS,KAAK,6BAA6B,GAAKC,EAAM,EAAG,EACzDD,EAAS,KAAK,6BAA6B,IAAMC,EAAMlF,EAAW,EAAG,EACrEiF,EAAS,KAAK,6BAA6B,KAAOC,EAAMlF,CAAQ,EAGhEgF,EAAW,QAAQC,CAAQ,EAC3BA,EAAS,QAAQF,EAAa,WAAW,EAGzCC,EAAW,MAAME,CAAG,EACpBF,EAAW,KAAKE,EAAMlF,CAAQ,CAEhC,OAAShF,EAAO,CACd,QAAQ,KAAK,6BAA8BA,CAAK,CAClD,CACF,CAKA,qBAAqBsE,EAAU,CAC7B,QAAQ,IAAI,oBAAqBA,CAAQ,CAC3C,CAKA,eAAeA,EAAU,SACvB,MAAMyC,IAAWR,EAAA,KAAK,kBAAL,YAAAA,EAAsB,uBAAwB,CAAA,EACzD1B,EAAO,CACX,WAAY,KAAK,cACjB,SAAUP,EACV,SAAUyC,EACV,oBAAmBoD,EAAA,KAAK,iBAAL,YAAAA,EAAqB,yBAA0B,CAAA,EAClE,UAAW,IAAI,KAAI,EAAG,YAAW,EACjC,QAAS,gBACf,EAEUxB,EAAO,IAAI,KAAK,CAAC,KAAK,UAAU9D,EAAM,KAAM,CAAC,CAAC,EAAG,CAAE,KAAM,kBAAkB,CAAE,EAC7E+D,EAAM,IAAI,gBAAgBD,CAAI,EAE9B3H,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAO4H,EACT5H,EAAE,SAAW,wBAAwB,KAAK,IAAG,CAAE,QAC/CA,EAAE,MAAK,EAEP,IAAI,gBAAgB4H,CAAG,EACvB,KAAK,WAAW,kCAAmC,SAAS,CAC9D,CAKA,iBAAiBlF,EAAQ,CAEnB,KAAK,gBAAkB,KAAK,eAAe,eAC7C,KAAK,eAAe,cAAc,iBAAiBA,CAAM,EAI3D,IAAI0G,EAAe,GACnB,UAAWC,KAAU,KAAK,aAAa,QACrC,GAAIA,EAAO,QAAU3G,EAAO,KAAM,CAChC0G,EAAe,GACf,KACF,CAGF,GAAI,CAACA,EAAc,CACjB,MAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQ3G,EAAO,KACtB2G,EAAO,YAAc3G,EAAO,KAC5B,KAAK,aAAa,YAAY2G,CAAM,CACtC,CAEA,KAAK,WAAW,WAAW3G,EAAO,IAAI,WAAY,SAAS,CAC7D,CAKA,uBAAwB,CACtB,GAAI,CAAC,KAAK,gBAAiB,OAG3B,MAAM4G,EADY,SAAS,eAAe,iBAAiB,EAC/B,MAAM,UAAY,OAE9C,KAAK,gBAAgB,WAAW,CAACA,CAAS,EAC1C,KAAK,eAAe,YAAcA,EAAY,2BAA6B,0BAC7E,CAKA,qBAAsB,CACpB,GAAI,CAAC,KAAK,cAAe,OAGzB,MAAMA,EADY,SAAS,eAAe,eAAe,EAC7B,MAAM,UAAY,OAE9C,KAAK,cAAc,WAAW,CAACA,CAAS,EACxC,KAAK,aAAa,YAAcA,EAAY,yBAA2B,wBACzE,CAKA,UAAW,CAEL,KAAK,cACP,KAAK,YAAY,MAAM,QAAU,KAAK,YAAc,OAAS,eAC7D,KAAK,YAAY,YAAc,KAAK,YAAc,iBAAmB,mBAGnE,KAAK,mBACP,KAAK,iBAAiB,YAAc,KAAK,YAAc,iBAAmB,mBAIxE,KAAK,aACP,KAAK,WAAW,MAAM,QAAU,KAAK,YAAc,eAAiB,QAIlE,KAAK,iBAAgB,KAAK,eAAe,SAAW,KAAK,aACzD,KAAK,YAAW,KAAK,UAAU,SAAW,KAAK,aAC/C,KAAK,cAAa,KAAK,YAAY,SAAW,KAAK,aACnD,KAAK,eAAc,KAAK,aAAa,SAAW,KAAK,YAC3D,CAKA,iBAAkB,CAChB,GAAI,KAAK,eAAgB,CACvB,MAAMC,EAAW,KAAK,eAAe,YAAW,EAC1CC,EAAe,KAAK,aAAe,KAAK,aAAa,qBAAoB,EAAK,SAC9EC,EAAa,KAAK,aAAe,KAAK,aAAa,cAAa,EAAK,MAE3E,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA,qCAGIF,CAAQ;AAAA;AAAA;AAAA;AAAA,qCAIR,KAAK,YAAc,oBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,qCAIlDE,CAAU;AAAA;AAAA;AAAA;AAAA,qCAIVD,CAAY;AAAA;AAAA,OAG7C,CACF,CAKA,wBAAyB,CACvB,GAAI,KAAK,iBAAiB,SAAW,EAAG,CACtC,KAAK,iBAAiB,UAAY,4EAClC,MACF,CAEA,MAAME,EAAc,KAAK,iBAAiB,IAAItJ,GAAa;AAAA;AAAA,6CAElBA,EAAU,MAAM;AAAA,kCAC3BA,EAAU,WAAa,GAAM,kBAAoBA,EAAU,WAAa,GAAM,oBAAsB,gBAAgB;AAAA,aACzIA,EAAU,WAAa,KAAK,QAAQ,CAAC,CAAC;AAAA;AAAA,kCAEjBA,EAAU,UAAU,QAAQ,CAAC,CAAC;AAAA,UACtDA,EAAU,gBAAkB,sCAAsCA,EAAU,gBAAgB,QAAQ,CAAC,CAAC,aAAe,EAAE;AAAA;AAAA,KAE5H,EAAE,KAAK,EAAE,EAEV,KAAK,iBAAiB,UAAYsJ,CACpC,CAKA,uBAAwB,CACtB,KAAK,iBAAmB,CAAA,EACxB,KAAK,uBAAsB,CAC7B,CAKA,WAAWC,EAASC,EAAO,OAAQ,CACjC,KAAK,cAAc,YAAcD,EACjC,KAAK,cAAc,UAAY,kBAAkBC,CAAI,GAGjDA,IAAS,SACX,WAAW,IAAM,CACf,KAAK,cAAc,YAAc,GACjC,KAAK,cAAc,UAAY,gBACjC,EAAG,GAAI,CAEX,CAKA,YAAYC,EAAS,CACnB,KAAK,YAAY,MAAM,MAAQ,GAAGA,CAAO,IACzC,KAAK,YAAY,MAAM,QAAUA,EAAU,EAAI,QAAU,MAC3D,CACF,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,GAAI,CACF,IAAI7B,EACJ,QAAQ,IAAI,sEAAsE,CACpF,OAAShJ,EAAO,CACd,QAAQ,MAAM,6CAA8CA,CAAK,EAGjE,MAAM8K,EAAgB,SAAS,eAAe,eAAe,EACzDA,IACFA,EAAc,YAAc,6BAA6B9K,EAAM,OAAO,GACtE8K,EAAc,UAAY,uBAE9B,CACF,CAAC"}